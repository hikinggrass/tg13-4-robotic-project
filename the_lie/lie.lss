
lie.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d14  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d6  00800060  00000d14  00000d88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800236  00000eea  00000f5e  2**0
                  ALLOC
  3 .debug_aranges 00000140  00000000  00000000  00000f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000034e  00000000  00000000  0000109e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f4c  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000088a  00000000  00000000  00002338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010c7  00000000  00000000  00002bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e0  00000000  00000000  00003c8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cc  00000000  00000000  00003f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003e0  00000000  00000000  00004338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00004718  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	5c c3       	rjmp	.+1720   	; 0x6be <__vector_2>
   6:	2d c3       	rjmp	.+1626   	; 0x662 <__vector_3>
   8:	e0 c2       	rjmp	.+1472   	; 0x5ca <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	67 c3       	rjmp	.+1742   	; 0x6ec <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	12 e0       	ldi	r17, 0x02	; 2
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 e1       	ldi	r30, 0x14	; 20
  3a:	fd e0       	ldi	r31, 0x0D	; 13
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a6 33       	cpi	r26, 0x36	; 54
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	12 e0       	ldi	r17, 0x02	; 2
  4a:	a6 e3       	ldi	r26, 0x36	; 54
  4c:	b2 e0       	ldi	r27, 0x02	; 2
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a3 35       	cpi	r26, 0x53	; 83
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	18 d2       	rcall	.+1072   	; 0x48a <main>
  5a:	5a c6       	rjmp	.+3252   	; 0xd10 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <readEEPROM>:
 *****************************************************************************
 * liest werte aus dem EEPROM aus und speichert diese in den
 * dazugehörigen Variablen.
 *****************************************************************************/
void readEEPROM(void)
{
  5e:	e1 99       	sbic	0x1c, 1	; 28
  60:	fe cf       	rjmp	.-4      	; 0x5e <readEEPROM>
{
    do {} while (!eeprom_is_ready ());
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
  62:	8e ef       	ldi	r24, 0xFE	; 254
  64:	91 e0       	ldi	r25, 0x01	; 1
  66:	9f bb       	out	0x1f, r25	; 31
  68:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
  6a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
  6c:	8d b3       	in	r24, 0x1d	; 29
	_EEGET(black_l,EE_BLACK_L);
  6e:	80 93 36 02 	sts	0x0236, r24
  72:	10 92 37 02 	sts	0x0237, r1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
  76:	e1 99       	sbic	0x1c, 1	; 28
  78:	fe cf       	rjmp	.-4      	; 0x76 <readEEPROM+0x18>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	91 e0       	ldi	r25, 0x01	; 1
  7e:	9f bb       	out	0x1f, r25	; 31
  80:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
  82:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
  84:	8d b3       	in	r24, 0x1d	; 29
	_EEGET(black_r,EE_BLACK_R);
  86:	80 93 38 02 	sts	0x0238, r24
  8a:	10 92 39 02 	sts	0x0239, r1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
  8e:	e1 99       	sbic	0x1c, 1	; 28
  90:	fe cf       	rjmp	.-4      	; 0x8e <readEEPROM+0x30>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	92 e0       	ldi	r25, 0x02	; 2
  96:	9f bb       	out	0x1f, r25	; 31
  98:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
  9a:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
  9c:	8d b3       	in	r24, 0x1d	; 29
	_EEGET(white_l,EE_WHITE_L);
  9e:	80 93 3e 02 	sts	0x023E, r24
  a2:	10 92 3f 02 	sts	0x023F, r1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
  a6:	e1 99       	sbic	0x1c, 1	; 28
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <readEEPROM+0x48>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	92 e0       	ldi	r25, 0x02	; 2
  ae:	9f bb       	out	0x1f, r25	; 31
  b0:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
  b2:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
  b4:	8d b3       	in	r24, 0x1d	; 29
	_EEGET(white_r,EE_WHITE_R);
  b6:	80 93 3c 02 	sts	0x023C, r24
  ba:	10 92 3d 02 	sts	0x023D, r1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
  be:	e1 99       	sbic	0x1c, 1	; 28
  c0:	fe cf       	rjmp	.-4      	; 0xbe <readEEPROM+0x60>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	92 e0       	ldi	r25, 0x02	; 2
  c6:	9f bb       	out	0x1f, r25	; 31
  c8:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
  ca:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
  cc:	8d b3       	in	r24, 0x1d	; 29
	_EEGET(msl,EE_MSL);
  ce:	80 93 40 02 	sts	0x0240, r24
  d2:	10 92 41 02 	sts	0x0241, r1
/** \ingroup avr_eeprom
    Read one byte from EEPROM address \a __p.
 */
__ATTR_PURE__ static __inline__ uint8_t eeprom_read_byte (const uint8_t *__p)
{
    do {} while (!eeprom_is_ready ());
  d6:	e1 99       	sbic	0x1c, 1	; 28
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <readEEPROM+0x78>
#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
  da:	83 e0       	ldi	r24, 0x03	; 3
  dc:	92 e0       	ldi	r25, 0x02	; 2
  de:	9f bb       	out	0x1f, r25	; 31
  e0:	8e bb       	out	0x1e, r24	; 30
#endif
    EECR |= (1 << EERE);
  e2:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
  e4:	8d b3       	in	r24, 0x1d	; 29
	_EEGET(msr,EE_MSR);
  e6:	80 93 3a 02 	sts	0x023A, r24
  ea:	10 92 3b 02 	sts	0x023B, r1
}
  ee:	08 95       	ret

000000f0 <KeyPressed>:
 * 23.5.2007 ch
 *
 * Quelle: http://www.roboterclub-freiburg.de/asuro/zufall/zufall.html
 *****************************************************************************/
uint8_t KeyPressed(void)
{
  f0:	8b 98       	cbi	0x11, 3	; 17
	uint8_t flag;
	
	DDRD &= ~SWITCHES; // High Impedance ( Input )
	DDRC |= (1<<PC4); // ADC-Switch-Pin to Output
  f2:	a4 9a       	sbi	0x14, 4	; 20
	PORTC |=  (1<<PC4); // load capacitor / Pull up
  f4:	ac 9a       	sbi	0x15, 4	; 21
	Msleep(1);
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	ef d4       	rcall	.+2526   	; 0xada <Msleep>
	DDRC &= ~(1<<PC4); // Set ACD-Switch to Input
  fc:	a4 98       	cbi	0x14, 4	; 20
	PORTC &=  ~(1<<PC4); // High Impedance
  fe:	ac 98       	cbi	0x15, 4	; 21

	Msleep(1);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	ea d4       	rcall	.+2516   	; 0xada <Msleep>

	if(PIND&SWITCHES) flag = FALSE;
 106:	80 b3       	in	r24, 0x10	; 16
 108:	86 95       	lsr	r24
 10a:	86 95       	lsr	r24
 10c:	86 95       	lsr	r24
 10e:	80 95       	com	r24
	else flag = TRUE;

	return flag;
}
 110:	81 70       	andi	r24, 0x01	; 1
 112:	08 95       	ret

00000114 <angekommen>:
 * Diese Funktion sendet über die Infrarotschnittstelle ein "x"-Singal, um an-
 * zuzeigen, dass unser Asuro im Ziel angekommen ist.
 * Irgendwelches Geblinke, Gedudle, oä. wäre dann auch hier einzufügen. ;)
 *****************************************************************************/
void angekommen(void)
{
 114:	80 e6       	ldi	r24, 0x60	; 96
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	10 d4       	rcall	.+2080   	; 0x93a <SerPrint>
 11a:	fc cf       	rjmp	.-8      	; 0x114 <angekommen>

0000011c <setMS>:
 * void setMS(void)
 *****************************************************************************
 * setze Motorgeschwindigkeit
 *****************************************************************************/
void setMS(void)
{
 11c:	af 92       	push	r10
 11e:	bf 92       	push	r11
 120:	cf 92       	push	r12
 122:	df 92       	push	r13
 124:	ef 92       	push	r14
 126:	ff 92       	push	r15
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	df 93       	push	r29
 12e:	cf 93       	push	r28
 130:	0f 92       	push	r0
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
	unsigned char serIn[1]; //input an der seriellen schnittstelle
	
	readEEPROM();
 136:	93 df       	rcall	.-218    	; 0x5e <readEEPROM>
	
	int tmsl = msl;
 138:	e0 90 40 02 	lds	r14, 0x0240
 13c:	f0 90 41 02 	lds	r15, 0x0241
	int tmsr = msr;
 140:	b0 90 3a 02 	lds	r11, 0x023A
 144:	a0 90 3b 02 	lds	r10, 0x023B
	int wait = 0;

	SerPrint("\r\n-Motorspeed einstellen-\r\na = +1\r\ns = -1\r\nd = speichern\r\nLinks:\r\n");
 148:	82 e6       	ldi	r24, 0x62	; 98
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	f6 d3       	rcall	.+2028   	; 0x93a <SerPrint>
	
	while(wait<1)
	{
		SerRead(serIn,1,0);
 14e:	6e 01       	movw	r12, r28
 150:	08 94       	sec
 152:	c1 1c       	adc	r12, r1
 154:	d1 1c       	adc	r13, r1
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	c6 01       	movw	r24, r12
 15e:	de d4       	rcall	.+2492   	; 0xb1c <SerRead>
		
		switch(serIn[0])
 160:	89 81       	ldd	r24, Y+1	; 0x01
 162:	84 36       	cpi	r24, 0x64	; 100
 164:	71 f0       	breq	.+28     	; 0x182 <setMS+0x66>
 166:	83 37       	cpi	r24, 0x73	; 115
 168:	41 f0       	breq	.+16     	; 0x17a <setMS+0x5e>
 16a:	81 36       	cpi	r24, 0x61	; 97
 16c:	19 f4       	brne	.+6      	; 0x174 <setMS+0x58>
		{
			case 'a': //+1
				tmsl += 1;
 16e:	08 94       	sec
 170:	e1 1c       	adc	r14, r1
 172:	f1 1c       	adc	r15, r1
 174:	00 e0       	ldi	r16, 0x00	; 0
 176:	10 e0       	ldi	r17, 0x00	; 0
 178:	0a c0       	rjmp	.+20     	; 0x18e <setMS+0x72>
				break;
			case 's': //-1
				tmsl -= 1;
 17a:	08 94       	sec
 17c:	e1 08       	sbc	r14, r1
 17e:	f1 08       	sbc	r15, r1
 180:	f9 cf       	rjmp	.-14     	; 0x174 <setMS+0x58>
				break;
			case 'd': //fertig
				msl = tmsl;
 182:	f0 92 41 02 	sts	0x0241, r15
 186:	e0 92 40 02 	sts	0x0240, r14
 18a:	01 e0       	ldi	r16, 0x01	; 1
 18c:	10 e0       	ldi	r17, 0x00	; 0
				wait = 1;
				break;
		}
		
		PrintInt(tmsl);
 18e:	c7 01       	movw	r24, r14
 190:	17 d4       	rcall	.+2094   	; 0x9c0 <PrintInt>
		SerPrint(" ");	
 192:	85 ea       	ldi	r24, 0xA5	; 165
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	d1 d3       	rcall	.+1954   	; 0x93a <SerPrint>
	int tmsr = msr;
	int wait = 0;

	SerPrint("\r\n-Motorspeed einstellen-\r\na = +1\r\ns = -1\r\nd = speichern\r\nLinks:\r\n");
	
	while(wait<1)
 198:	01 2b       	or	r16, r17
 19a:	e9 f2       	breq	.-70     	; 0x156 <setMS+0x3a>
	unsigned char serIn[1]; //input an der seriellen schnittstelle
	
	readEEPROM();
	
	int tmsl = msl;
	int tmsr = msr;
 19c:	8b 2d       	mov	r24, r11
 19e:	9a 2d       	mov	r25, r10
 1a0:	9c 01       	movw	r18, r24
 1a2:	79 01       	movw	r14, r18
		
		PrintInt(tmsl);
		SerPrint(" ");	
	}
	
	SerPrint("\r\nDone: MSL: ");
 1a4:	87 ea       	ldi	r24, 0xA7	; 167
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	c8 d3       	rcall	.+1936   	; 0x93a <SerPrint>
	PrintInt(msl);
 1aa:	80 91 40 02 	lds	r24, 0x0240
 1ae:	90 91 41 02 	lds	r25, 0x0241
 1b2:	06 d4       	rcall	.+2060   	; 0x9c0 <PrintInt>
	
	wait = 0;
	
	SerPrint("\r\nRechts:");
 1b4:	85 eb       	ldi	r24, 0xB5	; 181
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	c0 d3       	rcall	.+1920   	; 0x93a <SerPrint>
	
	while(wait<1)
	{
		SerRead(serIn,1,0);
 1ba:	6e 01       	movw	r12, r28
 1bc:	08 94       	sec
 1be:	c1 1c       	adc	r12, r1
 1c0:	d1 1c       	adc	r13, r1
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	c6 01       	movw	r24, r12
 1ca:	a8 d4       	rcall	.+2384   	; 0xb1c <SerRead>
		
		switch(serIn[0])
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	84 36       	cpi	r24, 0x64	; 100
 1d0:	71 f0       	breq	.+28     	; 0x1ee <setMS+0xd2>
 1d2:	83 37       	cpi	r24, 0x73	; 115
 1d4:	41 f0       	breq	.+16     	; 0x1e6 <setMS+0xca>
 1d6:	81 36       	cpi	r24, 0x61	; 97
 1d8:	19 f4       	brne	.+6      	; 0x1e0 <setMS+0xc4>
		{
			case 'a': //+1
				tmsr += 1;
 1da:	08 94       	sec
 1dc:	e1 1c       	adc	r14, r1
 1de:	f1 1c       	adc	r15, r1
 1e0:	00 e0       	ldi	r16, 0x00	; 0
 1e2:	10 e0       	ldi	r17, 0x00	; 0
 1e4:	0a c0       	rjmp	.+20     	; 0x1fa <setMS+0xde>
				break;
			case 's': //-1
				tmsr -= 1;
 1e6:	08 94       	sec
 1e8:	e1 08       	sbc	r14, r1
 1ea:	f1 08       	sbc	r15, r1
 1ec:	f9 cf       	rjmp	.-14     	; 0x1e0 <setMS+0xc4>
				break;
			case 'd': //fertig
				msr = tmsr;
 1ee:	f0 92 3b 02 	sts	0x023B, r15
 1f2:	e0 92 3a 02 	sts	0x023A, r14
 1f6:	01 e0       	ldi	r16, 0x01	; 1
 1f8:	10 e0       	ldi	r17, 0x00	; 0
				wait = 1;
				break;
		}
		
		PrintInt(tmsr);
 1fa:	c7 01       	movw	r24, r14
 1fc:	e1 d3       	rcall	.+1986   	; 0x9c0 <PrintInt>
		SerPrint(" ");	
 1fe:	85 ea       	ldi	r24, 0xA5	; 165
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	9b d3       	rcall	.+1846   	; 0x93a <SerPrint>
	
	wait = 0;
	
	SerPrint("\r\nRechts:");
	
	while(wait<1)
 204:	01 2b       	or	r16, r17
 206:	e9 f2       	breq	.-70     	; 0x1c2 <setMS+0xa6>
		
		PrintInt(tmsr);
		SerPrint(" ");	
	}
	
	SerPrint("\r\nDone: MSR: ");
 208:	8f eb       	ldi	r24, 0xBF	; 191
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	96 d3       	rcall	.+1836   	; 0x93a <SerPrint>
	PrintInt(msr);
 20e:	80 91 3a 02 	lds	r24, 0x023A
 212:	90 91 3b 02 	lds	r25, 0x023B
 216:	d4 d3       	rcall	.+1960   	; 0x9c0 <PrintInt>
	
	SerPrint("\r\nWriting holy shit to EEPROM\r\n");
 218:	8d ec       	ldi	r24, 0xCD	; 205
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	8e d3       	rcall	.+1820   	; 0x93a <SerPrint>
	
	_EEPUT(EE_MSL,msl);
 21e:	20 91 40 02 	lds	r18, 0x0240
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
 222:	e1 99       	sbic	0x1c, 1	; 28
 224:	fe cf       	rjmp	.-4      	; 0x222 <setMS+0x106>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	92 e0       	ldi	r25, 0x02	; 2
 22a:	9f bb       	out	0x1f, r25	; 31
 22c:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
 22e:	2d bb       	out	0x1d, r18	; 29

    __asm__ __volatile__ (
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	e2 9a       	sbi	0x1c, 2	; 28
 236:	e1 9a       	sbi	0x1c, 1	; 28
 238:	0f be       	out	0x3f, r0	; 63
	_EEPUT(EE_MSR,msr);
 23a:	20 91 3a 02 	lds	r18, 0x023A
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
 23e:	e1 99       	sbic	0x1c, 1	; 28
 240:	fe cf       	rjmp	.-4      	; 0x23e <setMS+0x122>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 242:	83 e0       	ldi	r24, 0x03	; 3
 244:	92 e0       	ldi	r25, 0x02	; 2
 246:	9f bb       	out	0x1f, r25	; 31
 248:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
 24a:	2d bb       	out	0x1d, r18	; 29

    __asm__ __volatile__ (
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	f8 94       	cli
 250:	e2 9a       	sbi	0x1c, 2	; 28
 252:	e1 9a       	sbi	0x1c, 1	; 28
 254:	0f be       	out	0x3f, r0	; 63
	
	SerPrint(done);
 256:	80 91 33 02 	lds	r24, 0x0233
 25a:	90 91 34 02 	lds	r25, 0x0234
 25e:	6d d3       	rcall	.+1754   	; 0x93a <SerPrint>
}
 260:	0f 90       	pop	r0
 262:	cf 91       	pop	r28
 264:	df 91       	pop	r29
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	df 90       	pop	r13
 270:	cf 90       	pop	r12
 272:	bf 90       	pop	r11
 274:	af 90       	pop	r10
 276:	08 95       	ret

00000278 <info>:
 * void info(void)
 *****************************************************************************
 * gib EEPROM infos aus
 *****************************************************************************/
void info(void)
{
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
	readEEPROM();
 27c:	f0 de       	rcall	.-544    	; 0x5e <readEEPROM>
	
	SerPrint("\r\nInfos:\r\nEEPROM:\r\n-Schwarzwerte-\r\nL: ");
 27e:	8d ee       	ldi	r24, 0xED	; 237
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	5b d3       	rcall	.+1718   	; 0x93a <SerPrint>
	PrintInt(black_l);
 284:	80 91 36 02 	lds	r24, 0x0236
 288:	90 91 37 02 	lds	r25, 0x0237
 28c:	99 d3       	rcall	.+1842   	; 0x9c0 <PrintInt>
	SerPrint(" R: ");
 28e:	04 e1       	ldi	r16, 0x14	; 20
 290:	11 e0       	ldi	r17, 0x01	; 1
 292:	c8 01       	movw	r24, r16
 294:	52 d3       	rcall	.+1700   	; 0x93a <SerPrint>
	PrintInt(black_r);
 296:	80 91 38 02 	lds	r24, 0x0238
 29a:	90 91 39 02 	lds	r25, 0x0239
 29e:	90 d3       	rcall	.+1824   	; 0x9c0 <PrintInt>
	
	SerPrint("\r\n-Weisswerte-\r\nL: ");
 2a0:	89 e1       	ldi	r24, 0x19	; 25
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	4a d3       	rcall	.+1684   	; 0x93a <SerPrint>
	PrintInt(white_l);
 2a6:	80 91 3e 02 	lds	r24, 0x023E
 2aa:	90 91 3f 02 	lds	r25, 0x023F
 2ae:	88 d3       	rcall	.+1808   	; 0x9c0 <PrintInt>
	SerPrint(" R: ");
 2b0:	c8 01       	movw	r24, r16
 2b2:	43 d3       	rcall	.+1670   	; 0x93a <SerPrint>
	PrintInt(white_r);
 2b4:	80 91 3c 02 	lds	r24, 0x023C
 2b8:	90 91 3d 02 	lds	r25, 0x023D
 2bc:	81 d3       	rcall	.+1794   	; 0x9c0 <PrintInt>
	
	SerPrint("\r\n-Motorspeed-\r\nL: ");
 2be:	8d e2       	ldi	r24, 0x2D	; 45
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	3b d3       	rcall	.+1654   	; 0x93a <SerPrint>
	PrintInt(msl);
 2c4:	80 91 40 02 	lds	r24, 0x0240
 2c8:	90 91 41 02 	lds	r25, 0x0241
 2cc:	79 d3       	rcall	.+1778   	; 0x9c0 <PrintInt>
	SerPrint(" R: ");
 2ce:	c8 01       	movw	r24, r16
 2d0:	34 d3       	rcall	.+1640   	; 0x93a <SerPrint>
	PrintInt(msr);
 2d2:	80 91 3a 02 	lds	r24, 0x023A
 2d6:	90 91 3b 02 	lds	r25, 0x023B
 2da:	72 d3       	rcall	.+1764   	; 0x9c0 <PrintInt>
	
	SerPrint(done);
 2dc:	80 91 33 02 	lds	r24, 0x0233
 2e0:	90 91 34 02 	lds	r25, 0x0234
 2e4:	2a d3       	rcall	.+1620   	; 0x93a <SerPrint>
}
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	08 95       	ret

000002ec <getKey>:
 * 0 = Kein Taster gedrückt
 * 1 = Taster aussen rechts
 * 6 = Taster aussen links
 *****************************************************************************/
uint8_t getKey(void)
{
 2ec:	96 d3       	rcall	.+1836   	; 0xa1a <PollSwitch>
		//pressed = KeyPressed();
		key = PollSwitch();
		
		//if(pressed)
		//{
			switch(key) 
 2ee:	84 30       	cpi	r24, 0x04	; 4
 2f0:	91 f0       	breq	.+36     	; 0x316 <getKey+0x2a>
 2f2:	85 30       	cpi	r24, 0x05	; 5
 2f4:	28 f4       	brcc	.+10     	; 0x300 <getKey+0x14>
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	61 f0       	breq	.+24     	; 0x312 <getKey+0x26>
 2fa:	82 30       	cpi	r24, 0x02	; 2
 2fc:	a1 f4       	brne	.+40     	; 0x326 <getKey+0x3a>
 2fe:	07 c0       	rjmp	.+14     	; 0x30e <getKey+0x22>
 300:	80 31       	cpi	r24, 0x10	; 16
 302:	69 f0       	breq	.+26     	; 0x31e <getKey+0x32>
 304:	80 32       	cpi	r24, 0x20	; 32
 306:	69 f0       	breq	.+26     	; 0x322 <getKey+0x36>
 308:	88 30       	cpi	r24, 0x08	; 8
 30a:	69 f4       	brne	.+26     	; 0x326 <getKey+0x3a>
 30c:	06 c0       	rjmp	.+12     	; 0x31a <getKey+0x2e>
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	08 95       	ret
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	08 95       	ret
 316:	83 e0       	ldi	r24, 0x03	; 3
 318:	08 95       	ret
				case 0x01:
					return 1;
				case 0x02:
					return 2;
				case 0x04:
					return 3;
 31a:	84 e0       	ldi	r24, 0x04	; 4
 31c:	08 95       	ret
				case 0x08:
					return 4;
 31e:	85 e0       	ldi	r24, 0x05	; 5
 320:	08 95       	ret
				case 0x10:
					return 5;
 322:	86 e0       	ldi	r24, 0x06	; 6
 324:	08 95       	ret
				case 0x20:
					return 6;
 326:	80 e0       	ldi	r24, 0x00	; 0
				default:
					return 0;
			}
		//}								Die hier auskommentierten Dinger scheinen überflüssig zu sein. Falls was nichts mehr tut, dürft ihr mich hauen. ;)
   }
}
 328:	08 95       	ret

0000032a <line_init>:
 * uint8_t line_init(void)
 *****************************************************************************
 * Kalibriert die Line-Sensoren
 *****************************************************************************/
void line_init(void)
{
 32a:	df 93       	push	r29
 32c:	cf 93       	push	r28
 32e:	00 d0       	rcall	.+0      	; 0x330 <line_init+0x6>
 330:	00 d0       	rcall	.+0      	; 0x332 <line_init+0x8>
 332:	cd b7       	in	r28, 0x3d	; 61
 334:	de b7       	in	r29, 0x3e	; 62
	uint8_t wait = 0;
	unsigned int data[2]; //Speicher für linedata bereitstellen
	
	FrontLED(ON);
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	c9 d2       	rcall	.+1426   	; 0x8cc <FrontLED>
	
	SerPrint("\r\nKalibriere Line-Sensor\r\nASURO auf schwarzen Untergrund stellen und T1 druecken\r\n");
 33a:	81 e4       	ldi	r24, 0x41	; 65
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	fd d2       	rcall	.+1530   	; 0x93a <SerPrint>
	
	while(wait<1)
	{
		if(getKey() == 1)
 340:	d5 df       	rcall	.-86     	; 0x2ec <getKey>
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	e9 f7       	brne	.-6      	; 0x340 <line_init+0x16>
		{
			SerPrint("Kalibriere...\r\n");
 346:	84 e9       	ldi	r24, 0x94	; 148
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	f7 d2       	rcall	.+1518   	; 0x93a <SerPrint>
			
			LineData(data);
 34c:	ce 01       	movw	r24, r28
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	5a d2       	rcall	.+1204   	; 0x806 <LineData>
			
			_EEPUT(EE_BLACK_L,data[LEFT]);		//Schwarzwerte in EEPROM schreiben
 352:	29 81       	ldd	r18, Y+1	; 0x01
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
 354:	e1 99       	sbic	0x1c, 1	; 28
 356:	fe cf       	rjmp	.-4      	; 0x354 <line_init+0x2a>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 358:	8e ef       	ldi	r24, 0xFE	; 254
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	9f bb       	out	0x1f, r25	; 31
 35e:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
 360:	2d bb       	out	0x1d, r18	; 29

    __asm__ __volatile__ (
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	f8 94       	cli
 366:	e2 9a       	sbi	0x1c, 2	; 28
 368:	e1 9a       	sbi	0x1c, 1	; 28
 36a:	0f be       	out	0x3f, r0	; 63
			_EEPUT(EE_BLACK_R,data[RIGHT]);
 36c:	2b 81       	ldd	r18, Y+3	; 0x03
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
 36e:	e1 99       	sbic	0x1c, 1	; 28
 370:	fe cf       	rjmp	.-4      	; 0x36e <line_init+0x44>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 372:	8f ef       	ldi	r24, 0xFF	; 255
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	9f bb       	out	0x1f, r25	; 31
 378:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
 37a:	2d bb       	out	0x1d, r18	; 29

    __asm__ __volatile__ (
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	f8 94       	cli
 380:	e2 9a       	sbi	0x1c, 2	; 28
 382:	e1 9a       	sbi	0x1c, 1	; 28
 384:	0f be       	out	0x3f, r0	; 63
			
			SerPrint("L: ");
 386:	84 ea       	ldi	r24, 0xA4	; 164
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	d7 d2       	rcall	.+1454   	; 0x93a <SerPrint>
			PrintInt(data[LEFT]);
 38c:	89 81       	ldd	r24, Y+1	; 0x01
 38e:	9a 81       	ldd	r25, Y+2	; 0x02
 390:	17 d3       	rcall	.+1582   	; 0x9c0 <PrintInt>
			SerPrint(" R: ");
 392:	84 e1       	ldi	r24, 0x14	; 20
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	d1 d2       	rcall	.+1442   	; 0x93a <SerPrint>
			PrintInt(data[RIGHT]);
 398:	8b 81       	ldd	r24, Y+3	; 0x03
 39a:	9c 81       	ldd	r25, Y+4	; 0x04
 39c:	11 d3       	rcall	.+1570   	; 0x9c0 <PrintInt>
			SerPrint("\r\nKalibrierung 1/2 - Abgeschlossen\r\n");
 39e:	88 ea       	ldi	r24, 0xA8	; 168
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	cb d2       	rcall	.+1430   	; 0x93a <SerPrint>
		}	
	}
	
	wait = 0;
	
	SerPrint("ASURO auf weissen Untergrund stellen und T1 druecken\r\n");
 3a4:	8d ec       	ldi	r24, 0xCD	; 205
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	c8 d2       	rcall	.+1424   	; 0x93a <SerPrint>
	
	while(wait<1)
	{
		if(getKey() == 1)
 3aa:	a0 df       	rcall	.-192    	; 0x2ec <getKey>
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	e9 f7       	brne	.-6      	; 0x3aa <line_init+0x80>
		{
			SerPrint("Kalibriere...\r\n");
 3b0:	84 e9       	ldi	r24, 0x94	; 148
 3b2:	91 e0       	ldi	r25, 0x01	; 1
 3b4:	c2 d2       	rcall	.+1412   	; 0x93a <SerPrint>
			
			LineData(data);
 3b6:	ce 01       	movw	r24, r28
 3b8:	01 96       	adiw	r24, 0x01	; 1
 3ba:	25 d2       	rcall	.+1098   	; 0x806 <LineData>
			
			_EEPUT(EE_WHITE_L,data[LEFT]);		//Weisswerte in EEPROM schreiben
 3bc:	29 81       	ldd	r18, Y+1	; 0x01
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
 3be:	e1 99       	sbic	0x1c, 1	; 28
 3c0:	fe cf       	rjmp	.-4      	; 0x3be <line_init+0x94>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	92 e0       	ldi	r25, 0x02	; 2
 3c6:	9f bb       	out	0x1f, r25	; 31
 3c8:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
 3ca:	2d bb       	out	0x1d, r18	; 29

    __asm__ __volatile__ (
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	f8 94       	cli
 3d0:	e2 9a       	sbi	0x1c, 2	; 28
 3d2:	e1 9a       	sbi	0x1c, 1	; 28
 3d4:	0f be       	out	0x3f, r0	; 63
			_EEPUT(EE_WHITE_R,data[RIGHT]);
 3d6:	2b 81       	ldd	r18, Y+3	; 0x03
/** \ingroup avr_eeprom
    Write a byte \a __value to EEPROM address \a __p.
 */
static __inline__ void eeprom_write_byte (uint8_t *__p, uint8_t __value)
{
    do {} while (!eeprom_is_ready ());
 3d8:	e1 99       	sbic	0x1c, 1	; 28
 3da:	fe cf       	rjmp	.-4      	; 0x3d8 <line_init+0xae>
#endif

#if	E2END <= 0xFF
    EEARL = (unsigned)__p;
#else
    EEAR = (unsigned)__p;
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	92 e0       	ldi	r25, 0x02	; 2
 3e0:	9f bb       	out	0x1f, r25	; 31
 3e2:	8e bb       	out	0x1e, r24	; 30
#endif
    EEDR = __value;
 3e4:	2d bb       	out	0x1d, r18	; 29

    __asm__ __volatile__ (
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	e2 9a       	sbi	0x1c, 2	; 28
 3ec:	e1 9a       	sbi	0x1c, 1	; 28
 3ee:	0f be       	out	0x3f, r0	; 63
			
			SerPrint("L: ");
 3f0:	84 ea       	ldi	r24, 0xA4	; 164
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	a2 d2       	rcall	.+1348   	; 0x93a <SerPrint>
			PrintInt(data[LEFT]);
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	9a 81       	ldd	r25, Y+2	; 0x02
 3fa:	e2 d2       	rcall	.+1476   	; 0x9c0 <PrintInt>
			SerPrint(" R: ");
 3fc:	84 e1       	ldi	r24, 0x14	; 20
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	9c d2       	rcall	.+1336   	; 0x93a <SerPrint>
			PrintInt(data[RIGHT]);
 402:	8b 81       	ldd	r24, Y+3	; 0x03
 404:	9c 81       	ldd	r25, Y+4	; 0x04
 406:	dc d2       	rcall	.+1464   	; 0x9c0 <PrintInt>
			SerPrint("\r\nKalibrierung 2/2 - Abgeschlossen\r\n");
 408:	84 e0       	ldi	r24, 0x04	; 4
 40a:	92 e0       	ldi	r25, 0x02	; 2
 40c:	96 d2       	rcall	.+1324   	; 0x93a <SerPrint>
			
			wait = 1;
		}	
	}
	
	FrontLED(OFF);
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	5d d2       	rcall	.+1210   	; 0x8cc <FrontLED>
	
	SerPrint(done);
 412:	80 91 33 02 	lds	r24, 0x0233
 416:	90 91 34 02 	lds	r25, 0x0234
 41a:	8f d2       	rcall	.+1310   	; 0x93a <SerPrint>
}
 41c:	0f 90       	pop	r0
 41e:	0f 90       	pop	r0
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	cf 91       	pop	r28
 426:	df 91       	pop	r29
 428:	08 95       	ret

0000042a <asuro_init>:
 * int asuro_init(void)
 *****************************************************************************
 * initialisiert den Asuro
 *****************************************************************************/
int asuro_init(void) 
{
 42a:	0f 93       	push	r16
 42c:	1f 93       	push	r17
 42e:	df 93       	push	r29
 430:	cf 93       	push	r28
 432:	0f 92       	push	r0
 434:	cd b7       	in	r28, 0x3d	; 61
 436:	de b7       	in	r29, 0x3e	; 62
	unsigned char serIn[1]; //input an der seriellen schnittstelle
	
	while(42)
	{
		SerRead(serIn,1,1); //warten auf Startzeichen
 438:	8e 01       	movw	r16, r28
 43a:	0f 5f       	subi	r16, 0xFF	; 255
 43c:	1f 4f       	sbci	r17, 0xFF	; 255
 43e:	41 e0       	ldi	r20, 0x01	; 1
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	61 e0       	ldi	r22, 0x01	; 1
 444:	c8 01       	movw	r24, r16
 446:	6a d3       	rcall	.+1748   	; 0xb1c <SerRead>
		
		switch(serIn[0])
 448:	89 81       	ldd	r24, Y+1	; 0x01
 44a:	8c 36       	cpi	r24, 0x6C	; 108
 44c:	51 f0       	breq	.+20     	; 0x462 <__stack+0x3>
 44e:	8d 36       	cpi	r24, 0x6D	; 109
 450:	18 f4       	brcc	.+6      	; 0x458 <asuro_init+0x2e>
 452:	89 36       	cpi	r24, 0x69	; 105
 454:	59 f4       	brne	.+22     	; 0x46c <__stack+0xd>
 456:	07 c0       	rjmp	.+14     	; 0x466 <__stack+0x7>
 458:	8d 36       	cpi	r24, 0x6D	; 109
 45a:	39 f0       	breq	.+14     	; 0x46a <__stack+0xb>
 45c:	83 37       	cpi	r24, 0x73	; 115
 45e:	31 f4       	brne	.+12     	; 0x46c <__stack+0xd>
 460:	0b c0       	rjmp	.+22     	; 0x478 <__stack+0x19>
			case START:		//startprozedur einleiten
				readEEPROM();
				return 0; 
				
			case C_LINE:	//line-sensor konfigurieren
				line_init();
 462:	63 df       	rcall	.-314    	; 0x32a <line_init>
 464:	03 c0       	rjmp	.+6      	; 0x46c <__stack+0xd>
				break;
				
			case INFO:		//Infos ausgeben (atm aus EEPROM auslesen)
				info();
 466:	08 df       	rcall	.-496    	; 0x278 <info>
 468:	01 c0       	rjmp	.+2      	; 0x46c <__stack+0xd>
				break;
				
			case SETMS:		//Motorspeed per SeriellerSchnittstelle setzen
				setMS();
 46a:	58 de       	rcall	.-848    	; 0x11c <setMS>
				break;
		}
		if(getKey() != 0) //Alternativ durch Knopfdruck zu starten
 46c:	3f df       	rcall	.-386    	; 0x2ec <getKey>
 46e:	88 23       	and	r24, r24
 470:	31 f3       	breq	.-52     	; 0x43e <asuro_init+0x14>
			{
			Msleep(1000); //Zeit, um die Grabscherchen aus dem Weg zu tun. :-P
 472:	88 ee       	ldi	r24, 0xE8	; 232
 474:	93 e0       	ldi	r25, 0x03	; 3
 476:	31 d3       	rcall	.+1634   	; 0xada <Msleep>
			readEEPROM();
 478:	f2 dd       	rcall	.-1052   	; 0x5e <readEEPROM>
			return 0;
			}
	}
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	0f 90       	pop	r0
 480:	cf 91       	pop	r28
 482:	df 91       	pop	r29
 484:	1f 91       	pop	r17
 486:	0f 91       	pop	r16
 488:	08 95       	ret

0000048a <main>:
********************************************/



int main(void)
{
 48a:	df 92       	push	r13
 48c:	ef 92       	push	r14
 48e:	ff 92       	push	r15
 490:	0f 93       	push	r16
 492:	1f 93       	push	r17
 494:	df 93       	push	r29
 496:	cf 93       	push	r28
 498:	00 d0       	rcall	.+0      	; 0x49a <main+0x10>
 49a:	00 d0       	rcall	.+0      	; 0x49c <main+0x12>
 49c:	cd b7       	in	r28, 0x3d	; 61
 49e:	de b7       	in	r29, 0x3e	; 62
	Init(); //Asuros Initfunktion ... is a lie!
 4a0:	52 d1       	rcall	.+676    	; 0x746 <Init>
	
	int devNull = asuro_init(); //unsre init-Funktion
 4a2:	c3 df       	rcall	.-122    	; 0x42a <asuro_init>
	unsigned int data[2];
	int mode = 0; //Zustandsvariable. 0 = Linie folgen, 1 = Linienfolge-Korretur, 2 = Gerades Stück!...
	int mode_alt = 0; //braucht man, um die Linie-Labyrinth-übergänge sauber zu erkennen.
	//unsigned long zeit; //Hilfsvariable, damit die Zustand nur in bestimmten Zeitabständen geändert werden kann. Damit reagiert all das nicht mehr so giftig.
	
	MotorDir(FWD,FWD);
 4a4:	60 e2       	ldi	r22, 0x20	; 32
 4a6:	80 e2       	ldi	r24, 0x20	; 32
 4a8:	34 d2       	rcall	.+1128   	; 0x912 <MotorDir>
	MotorSpeed(msl - 80,msr - 80);
 4aa:	60 91 3a 02 	lds	r22, 0x023A
 4ae:	60 55       	subi	r22, 0x50	; 80
 4b0:	80 91 40 02 	lds	r24, 0x0240
 4b4:	80 55       	subi	r24, 0x50	; 80
 4b6:	26 d2       	rcall	.+1100   	; 0x904 <MotorSpeed>
	FrontLED(ON);
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	08 d2       	rcall	.+1040   	; 0x8cc <FrontLED>
	
	LineData(data);			//ein Startwert!
 4bc:	8e 01       	movw	r16, r28
 4be:	0f 5f       	subi	r16, 0xFF	; 255
 4c0:	1f 4f       	sbci	r17, 0xFF	; 255
 4c2:	c8 01       	movw	r24, r16
 4c4:	a0 d1       	rcall	.+832    	; 0x806 <LineData>
 4c6:	ee 24       	eor	r14, r14
 4c8:	ff 24       	eor	r15, r15
	//zeit = Gettime();		//ein Startwert!
	
	while(mode == 0 || mode == 1 || mode == 2) //Solang man im Labyrinthteil ist...
	{
		LineData(data);		//ein neuer Wert!
 4ca:	d0 2e       	mov	r13, r16
 4cc:	01 2f       	mov	r16, r17
 4ce:	67 c0       	rjmp	.+206    	; 0x59e <main+0x114>
 4d0:	8d 2d       	mov	r24, r13
 4d2:	90 2f       	mov	r25, r16
 4d4:	98 d1       	rcall	.+816    	; 0x806 <LineData>
		{
			zeit = Gettime();
			mode_alt = mode;	//Der mode des letzten Durchgangs aufheben
		}*/
		
		if(data[0] >= white_l - 20 && data[1] >= white_r - 20)	//FALLS: Mit beiden Sensoren auf weiß?
 4d6:	80 91 3e 02 	lds	r24, 0x023E
 4da:	90 91 3f 02 	lds	r25, 0x023F
 4de:	44 97       	sbiw	r24, 0x14	; 20
 4e0:	29 81       	ldd	r18, Y+1	; 0x01
 4e2:	3a 81       	ldd	r19, Y+2	; 0x02
 4e4:	28 17       	cp	r18, r24
 4e6:	39 07       	cpc	r19, r25
 4e8:	80 f0       	brcs	.+32     	; 0x50a <main+0x80>
 4ea:	80 91 3c 02 	lds	r24, 0x023C
 4ee:	90 91 3d 02 	lds	r25, 0x023D
 4f2:	44 97       	sbiw	r24, 0x14	; 20
 4f4:	2b 81       	ldd	r18, Y+3	; 0x03
 4f6:	3c 81       	ldd	r19, Y+4	; 0x04
 4f8:	28 17       	cp	r18, r24
 4fa:	39 07       	cpc	r19, r25
 4fc:	30 f0       	brcs	.+12     	; 0x50a <main+0x80>
		{
			if(mode_alt == 1 || mode_alt == 0)		//FALLS: Zuvor schräg?
			{
				MotorDir(RWD,RWD);		//Dann rückwärts und
 4fe:	60 e1       	ldi	r22, 0x10	; 16
 500:	80 e1       	ldi	r24, 0x10	; 16
 502:	07 d2       	rcall	.+1038   	; 0x912 <MotorDir>
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	e9 2e       	mov	r14, r25
 508:	f1 2c       	mov	r15, r1
				MotorDir(FWD,FWD);		//Dann brav weiterfahren. Hier müssten wir am Dreieck vom Labyrinth sein. --> Einfach gerade aus fahren.
				mode = 3;
			}*/
		}
		
		if(data[0] >= white_l - 20 && data[1] <= black_r + 20)	//FALLS: links von der Linie
 50a:	80 91 3e 02 	lds	r24, 0x023E
 50e:	90 91 3f 02 	lds	r25, 0x023F
 512:	44 97       	sbiw	r24, 0x14	; 20
 514:	29 81       	ldd	r18, Y+1	; 0x01
 516:	3a 81       	ldd	r19, Y+2	; 0x02
 518:	28 17       	cp	r18, r24
 51a:	39 07       	cpc	r19, r25
 51c:	78 f0       	brcs	.+30     	; 0x53c <main+0xb2>
 51e:	80 91 38 02 	lds	r24, 0x0238
 522:	90 91 39 02 	lds	r25, 0x0239
 526:	44 96       	adiw	r24, 0x14	; 20
 528:	2b 81       	ldd	r18, Y+3	; 0x03
 52a:	3c 81       	ldd	r19, Y+4	; 0x04
 52c:	82 17       	cp	r24, r18
 52e:	93 07       	cpc	r25, r19
 530:	28 f0       	brcs	.+10     	; 0x53c <main+0xb2>
		{
			MotorDir(FWD,RWD);		//Dann Korrektur nach rechts
 532:	60 e1       	ldi	r22, 0x10	; 16
 534:	80 e2       	ldi	r24, 0x20	; 32
 536:	ed d1       	rcall	.+986    	; 0x912 <MotorDir>
 538:	ee 24       	eor	r14, r14
 53a:	ff 24       	eor	r15, r15
			mode = 0;
		}
		
		if(data[0] <= black_l + 20 && data[1] >= white_r - 20)	//FALLS: rechts von der Linie
 53c:	80 91 36 02 	lds	r24, 0x0236
 540:	90 91 37 02 	lds	r25, 0x0237
 544:	44 96       	adiw	r24, 0x14	; 20
 546:	29 81       	ldd	r18, Y+1	; 0x01
 548:	3a 81       	ldd	r19, Y+2	; 0x02
 54a:	82 17       	cp	r24, r18
 54c:	93 07       	cpc	r25, r19
 54e:	78 f0       	brcs	.+30     	; 0x56e <main+0xe4>
 550:	80 91 3c 02 	lds	r24, 0x023C
 554:	90 91 3d 02 	lds	r25, 0x023D
 558:	44 97       	sbiw	r24, 0x14	; 20
 55a:	2b 81       	ldd	r18, Y+3	; 0x03
 55c:	3c 81       	ldd	r19, Y+4	; 0x04
 55e:	28 17       	cp	r18, r24
 560:	39 07       	cpc	r19, r25
 562:	28 f0       	brcs	.+10     	; 0x56e <main+0xe4>
		{
			MotorDir(RWD,FWD);		//Dann Korrektur nach links
 564:	60 e2       	ldi	r22, 0x20	; 32
 566:	80 e1       	ldi	r24, 0x10	; 16
 568:	d4 d1       	rcall	.+936    	; 0x912 <MotorDir>
 56a:	ee 24       	eor	r14, r14
 56c:	ff 24       	eor	r15, r15
			mode = 0;
		}
		
		if(data[0] <= black_l + 20 && data[0] <= black_r + 20)	//FALLS: Beide Sensoren auf der Linie (auf Schwarz)?
 56e:	29 81       	ldd	r18, Y+1	; 0x01
 570:	3a 81       	ldd	r19, Y+2	; 0x02
 572:	80 91 36 02 	lds	r24, 0x0236
 576:	90 91 37 02 	lds	r25, 0x0237
 57a:	44 96       	adiw	r24, 0x14	; 20
 57c:	82 17       	cp	r24, r18
 57e:	93 07       	cpc	r25, r19
 580:	70 f0       	brcs	.+28     	; 0x59e <main+0x114>
 582:	80 91 38 02 	lds	r24, 0x0238
 586:	90 91 39 02 	lds	r25, 0x0239
 58a:	44 96       	adiw	r24, 0x14	; 20
 58c:	82 17       	cp	r24, r18
 58e:	93 07       	cpc	r25, r19
 590:	30 f0       	brcs	.+12     	; 0x59e <main+0x114>
		{
			MotorDir(FWD,FWD);		//Dann einfach gerade aus fahren
 592:	60 e2       	ldi	r22, 0x20	; 32
 594:	80 e2       	ldi	r24, 0x20	; 32
 596:	bd d1       	rcall	.+890    	; 0x912 <MotorDir>
 598:	82 e0       	ldi	r24, 0x02	; 2
 59a:	e8 2e       	mov	r14, r24
 59c:	f1 2c       	mov	r15, r1
	FrontLED(ON);
	
	LineData(data);			//ein Startwert!
	//zeit = Gettime();		//ein Startwert!
	
	while(mode == 0 || mode == 1 || mode == 2) //Solang man im Labyrinthteil ist...
 59e:	83 e0       	ldi	r24, 0x03	; 3
 5a0:	e8 16       	cp	r14, r24
 5a2:	f1 04       	cpc	r15, r1
 5a4:	08 f4       	brcc	.+2      	; 0x5a8 <main+0x11e>
 5a6:	94 cf       	rjmp	.-216    	; 0x4d0 <main+0x46>
			MotorDir(FWD,FWD);		//Dann einfach gerade aus fahren
			mode = 2;				//und für den nächsten Durchlauf festhalten, dass man gerade war. (siehe "else" oben)
		}
	}
	
	MotorSpeed(0,0);
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	ab d1       	rcall	.+854    	; 0x904 <MotorSpeed>
	
	return 0;
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0f 90       	pop	r0
 5b4:	0f 90       	pop	r0
 5b6:	0f 90       	pop	r0
 5b8:	0f 90       	pop	r0
 5ba:	cf 91       	pop	r28
 5bc:	df 91       	pop	r29
 5be:	1f 91       	pop	r17
 5c0:	0f 91       	pop	r16
 5c2:	ff 90       	pop	r15
 5c4:	ef 90       	pop	r14
 5c6:	df 90       	pop	r13
 5c8:	08 95       	ret

000005ca <__vector_4>:

  \par  Beispiel:
  (Nicht vorhanden)
*****************************************************************************/
SIGNAL (SIG_OVERFLOW2)
{
 5ca:	1f 92       	push	r1
 5cc:	0f 92       	push	r0
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	0f 92       	push	r0
 5d2:	11 24       	eor	r1, r1
 5d4:	2f 93       	push	r18
 5d6:	3f 93       	push	r19
 5d8:	4f 93       	push	r20
 5da:	5f 93       	push	r21
 5dc:	6f 93       	push	r22
 5de:	7f 93       	push	r23
 5e0:	8f 93       	push	r24
 5e2:	9f 93       	push	r25
 5e4:	af 93       	push	r26
 5e6:	bf 93       	push	r27
 5e8:	ef 93       	push	r30
 5ea:	ff 93       	push	r31
  TCNT2 += 0x25;
 5ec:	84 b5       	in	r24, 0x24	; 36
 5ee:	8b 5d       	subi	r24, 0xDB	; 219
 5f0:	84 bd       	out	0x24, r24	; 36
  count36kHz ++;
 5f2:	80 91 4c 02 	lds	r24, 0x024C
 5f6:	8f 5f       	subi	r24, 0xFF	; 255
 5f8:	80 93 4c 02 	sts	0x024C, r24
  if (!count36kHz)
 5fc:	80 91 4c 02 	lds	r24, 0x024C
 600:	88 23       	and	r24, r24
 602:	99 f4       	brne	.+38     	; 0x62a <__vector_4+0x60>
    timebase ++;
 604:	80 91 4f 02 	lds	r24, 0x024F
 608:	90 91 50 02 	lds	r25, 0x0250
 60c:	a0 91 51 02 	lds	r26, 0x0251
 610:	b0 91 52 02 	lds	r27, 0x0252
 614:	01 96       	adiw	r24, 0x01	; 1
 616:	a1 1d       	adc	r26, r1
 618:	b1 1d       	adc	r27, r1
 61a:	80 93 4f 02 	sts	0x024F, r24
 61e:	90 93 50 02 	sts	0x0250, r25
 622:	a0 93 51 02 	sts	0x0251, r26
 626:	b0 93 52 02 	sts	0x0252, r27
  if (Ovr2IntFunc)
 62a:	80 91 4d 02 	lds	r24, 0x024D
 62e:	90 91 4e 02 	lds	r25, 0x024E
 632:	89 2b       	or	r24, r25
 634:	29 f0       	breq	.+10     	; 0x640 <__vector_4+0x76>
    Ovr2IntFunc();
 636:	e0 91 4d 02 	lds	r30, 0x024D
 63a:	f0 91 4e 02 	lds	r31, 0x024E
 63e:	09 95       	icall
}
 640:	ff 91       	pop	r31
 642:	ef 91       	pop	r30
 644:	bf 91       	pop	r27
 646:	af 91       	pop	r26
 648:	9f 91       	pop	r25
 64a:	8f 91       	pop	r24
 64c:	7f 91       	pop	r23
 64e:	6f 91       	pop	r22
 650:	5f 91       	pop	r21
 652:	4f 91       	pop	r20
 654:	3f 91       	pop	r19
 656:	2f 91       	pop	r18
 658:	0f 90       	pop	r0
 65a:	0f be       	out	0x3f, r0	; 63
 65c:	0f 90       	pop	r0
 65e:	1f 90       	pop	r1
 660:	18 95       	reti

00000662 <__vector_3>:
#if defined(__AVR_ATmega168__)
SIGNAL(SIG_OUTPUT_COMPARE2A)
#else
SIGNAL(SIG_OUTPUT_COMPARE2) 
#endif
{
 662:	1f 92       	push	r1
 664:	0f 92       	push	r0
 666:	0f b6       	in	r0, 0x3f	; 63
 668:	0f 92       	push	r0
 66a:	11 24       	eor	r1, r1
 66c:	8f 93       	push	r24
 66e:	9f 93       	push	r25
 670:	af 93       	push	r26
 672:	bf 93       	push	r27
	count36kHz++;
 674:	80 91 4c 02 	lds	r24, 0x024C
 678:	8f 5f       	subi	r24, 0xFF	; 255
 67a:	80 93 4c 02 	sts	0x024C, r24
  if (!count36kHz)
 67e:	80 91 4c 02 	lds	r24, 0x024C
 682:	88 23       	and	r24, r24
 684:	99 f4       	brne	.+38     	; 0x6ac <__vector_3+0x4a>
    timebase ++;
 686:	80 91 4f 02 	lds	r24, 0x024F
 68a:	90 91 50 02 	lds	r25, 0x0250
 68e:	a0 91 51 02 	lds	r26, 0x0251
 692:	b0 91 52 02 	lds	r27, 0x0252
 696:	01 96       	adiw	r24, 0x01	; 1
 698:	a1 1d       	adc	r26, r1
 69a:	b1 1d       	adc	r27, r1
 69c:	80 93 4f 02 	sts	0x024F, r24
 6a0:	90 93 50 02 	sts	0x0250, r25
 6a4:	a0 93 51 02 	sts	0x0251, r26
 6a8:	b0 93 52 02 	sts	0x0252, r27
}
 6ac:	bf 91       	pop	r27
 6ae:	af 91       	pop	r26
 6b0:	9f 91       	pop	r25
 6b2:	8f 91       	pop	r24
 6b4:	0f 90       	pop	r0
 6b6:	0f be       	out	0x3f, r0	; 63
 6b8:	0f 90       	pop	r0
 6ba:	1f 90       	pop	r1
 6bc:	18 95       	reti

000006be <__vector_2>:

  \par  Beispiel:
  (Nicht vorhanden)
*****************************************************************************/
SIGNAL (SIG_INTERRUPT1)
{
 6be:	1f 92       	push	r1
 6c0:	0f 92       	push	r0
 6c2:	0f b6       	in	r0, 0x3f	; 63
 6c4:	0f 92       	push	r0
 6c6:	11 24       	eor	r1, r1
 6c8:	8f 93       	push	r24
 6ca:	9f 93       	push	r25
  switched = 1;
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	90 93 43 02 	sts	0x0243, r25
 6d4:	80 93 42 02 	sts	0x0242, r24
#if defined(__AVR_ATmega168__)
  EIMSK &= ~_BV(INT1);                // Externen Interrupt 1 sperren
#else
  GICR &= ~_BV(INT1);                 // Externen Interrupt 1 sperren
 6d8:	8b b7       	in	r24, 0x3b	; 59
 6da:	8f 77       	andi	r24, 0x7F	; 127
 6dc:	8b bf       	out	0x3b, r24	; 59
#endif
//  StopSwitch ();
}
 6de:	9f 91       	pop	r25
 6e0:	8f 91       	pop	r24
 6e2:	0f 90       	pop	r0
 6e4:	0f be       	out	0x3f, r0	; 63
 6e6:	0f 90       	pop	r0
 6e8:	1f 90       	pop	r1
 6ea:	18 95       	reti

000006ec <__vector_14>:

  \par  Beispiel:
  (Nicht vorhanden)
*****************************************************************************/
SIGNAL (SIG_ADC)
{
 6ec:	1f 92       	push	r1
 6ee:	0f 92       	push	r0
 6f0:	0f b6       	in	r0, 0x3f	; 63
 6f2:	0f 92       	push	r0
 6f4:	11 24       	eor	r1, r1
 6f6:	2f 93       	push	r18
 6f8:	3f 93       	push	r19
 6fa:	4f 93       	push	r20
 6fc:	5f 93       	push	r21
 6fe:	6f 93       	push	r22
 700:	7f 93       	push	r23
 702:	8f 93       	push	r24
 704:	9f 93       	push	r25
 706:	af 93       	push	r26
 708:	bf 93       	push	r27
 70a:	ef 93       	push	r30
 70c:	ff 93       	push	r31
  if (AdcIntFunc)
 70e:	80 91 44 02 	lds	r24, 0x0244
 712:	90 91 45 02 	lds	r25, 0x0245
 716:	89 2b       	or	r24, r25
 718:	29 f0       	breq	.+10     	; 0x724 <__vector_14+0x38>
    AdcIntFunc();
 71a:	e0 91 44 02 	lds	r30, 0x0244
 71e:	f0 91 45 02 	lds	r31, 0x0245
 722:	09 95       	icall
}
 724:	ff 91       	pop	r31
 726:	ef 91       	pop	r30
 728:	bf 91       	pop	r27
 72a:	af 91       	pop	r26
 72c:	9f 91       	pop	r25
 72e:	8f 91       	pop	r24
 730:	7f 91       	pop	r23
 732:	6f 91       	pop	r22
 734:	5f 91       	pop	r21
 736:	4f 91       	pop	r20
 738:	3f 91       	pop	r19
 73a:	2f 91       	pop	r18
 73c:	0f 90       	pop	r0
 73e:	0f be       	out	0x3f, r0	; 63
 740:	0f 90       	pop	r0
 742:	1f 90       	pop	r1
 744:	18 95       	reti

00000746 <Init>:
  }
  \endcode
*****************************************************************************/
void Init (
  void)
{
 746:	89 e7       	ldi	r24, 0x79	; 121
 748:	85 bd       	out	0x25, r24	; 37
  TIMSK2 |= _BV(TOIE2); 
#else
  // fast PWM, set OC2A on compare match, clear OC2A at bottom, clk/1
  TCCR2 = _BV(WGM20) | _BV(WGM21) | _BV(COM20) | _BV(COM21) | _BV(CS20);
  // interrupt on timer overflow
  TIMSK |= _BV(TOIE2); 
 74a:	89 b7       	in	r24, 0x39	; 57
 74c:	80 64       	ori	r24, 0x40	; 64
 74e:	89 bf       	out	0x39, r24	; 57
#endif
  // 36kHz carrier/timer
  OCR2  = 0x91;
 750:	81 e9       	ldi	r24, 0x91	; 145
 752:	83 bd       	out	0x23, r24	; 35
   UBRR0L = (uint8_t)(F_CPU/(BAUD_RATE*16L)-1);
   UBRR0H = (F_CPU/(BAUD_RATE*16L)-1) >> 8;
   UCSR0B = (1<<RXEN0) | (1<<TXEN0);
   UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);
#else
  UBRRH = (((F_CPU/BAUD_RATE)/16)-1)>>8; 	// set baud rate
 754:	10 bc       	out	0x20, r1	; 32
  UBRRL = (((F_CPU/BAUD_RATE)/16)-1);
 756:	8f ec       	ldi	r24, 0xCF	; 207
 758:	89 b9       	out	0x09, r24	; 9
  UCSRB = (1<<RXEN)|(1<<TXEN);  // enable Rx & Tx
 75a:	88 e1       	ldi	r24, 0x18	; 24
 75c:	8a b9       	out	0x0a, r24	; 10
  UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);  // config USART; 8N1
 75e:	96 e8       	ldi	r25, 0x86	; 134
 760:	90 bd       	out	0x20, r25	; 32
    Port B: Seriell Senden; Richtungsvorgabe Motor links; Takt fuer die
            Geschwindigkeit beider Motoren; Grueneanteil-Status-LED
    Port D: Richtungsvorgabe Motor rechts; Vordere LED;
            Odometrie-LED (Radsensor); Rotanteil-Status-LED
  */
  DDRB = IRTX | RIGHT_DIR | PWM | GREEN_LED;
 762:	8f e3       	ldi	r24, 0x3F	; 63
 764:	87 bb       	out	0x17, r24	; 23
  DDRD = LEFT_DIR | FRONT_LED | ODOMETRIE_LED | RED_LED;
 766:	84 ef       	ldi	r24, 0xF4	; 244
 768:	81 bb       	out	0x11, r24	; 17

  /*
    PWM-Kanaele OC1A und OC1B auf 8-Bit einstellen.
    Sie werden fuer die Geschwindigkeitsvorgaben der Motoren benutzt.
  */
  TCCR1A = _BV(WGM10) | _BV(COM1A1) | _BV(COM1B1);
 76a:	81 ea       	ldi	r24, 0xA1	; 161
 76c:	8f bd       	out	0x2f, r24	; 47
  TCCR1B = _BV(CS11);                 // tmr1-Timer mit MCU-Takt/8 betreiben.
 76e:	82 e0       	ldi	r24, 0x02	; 2
 770:	8e bd       	out	0x2e, r24	; 46

  /*
    Einstellungen des A/D-Wandlers auf MCU-Takt/64
  */
  ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1);
 772:	96 b9       	out	0x06, r25	; 6
    Sonstige Vorbereitungen.
    - Alle LED's ausschalten
    - Motoren stoppen und schon mal auf Vorwaerts einstellen.
    - Globale Variable autoencoder ausschalten.
  */
  ODOMETRIE_LED_OFF;
 774:	97 98       	cbi	0x12, 7	; 18
  FrontLED (OFF);
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	a9 d0       	rcall	.+338    	; 0x8cc <FrontLED>
  BackLED (ON, ON);
 77a:	61 e0       	ldi	r22, 0x01	; 1
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	af d0       	rcall	.+350    	; 0x8de <BackLED>
  BackLED (OFF, OFF);
 780:	60 e0       	ldi	r22, 0x00	; 0
 782:	80 e0       	ldi	r24, 0x00	; 0
 784:	ac d0       	rcall	.+344    	; 0x8de <BackLED>
  StatusLED (GREEN);
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	8e d0       	rcall	.+284    	; 0x8a6 <StatusLED>

  MotorDir (FWD, FWD);
 78a:	60 e2       	ldi	r22, 0x20	; 32
 78c:	80 e2       	ldi	r24, 0x20	; 32
 78e:	c1 d0       	rcall	.+386    	; 0x912 <MotorDir>
  MotorSpeed (0, 0);
 790:	60 e0       	ldi	r22, 0x00	; 0
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	b7 d0       	rcall	.+366    	; 0x904 <MotorSpeed>

  autoencode = FALSE;
 796:	10 92 47 02 	sts	0x0247, r1
 79a:	10 92 46 02 	sts	0x0246, r1

  Ovr2IntFunc = 0;
 79e:	10 92 4e 02 	sts	0x024E, r1
 7a2:	10 92 4d 02 	sts	0x024D, r1
  AdcIntFunc = 0;
 7a6:	10 92 45 02 	sts	0x0245, r1
 7aa:	10 92 44 02 	sts	0x0244, r1
  /*
    Funktion zum ALLGEMEINEN ZULASSEN von Interrupts.
  */
  sei ();
 7ae:	78 94       	sei
}
 7b0:	08 95       	ret

000007b2 <OdometryData>:
  BackLED (ON, OFF);          // linke Back-LED mal wieder anschalten
  \endcode
*****************************************************************************/
void  OdometryData (
  unsigned int  *data)
{
 7b2:	ef 92       	push	r14
 7b4:	ff 92       	push	r15
 7b6:	0f 93       	push	r16
 7b8:	1f 93       	push	r17
 7ba:	8c 01       	movw	r16, r24
  int   ec_bak = autoencode;            // Sichert aktuellen Zustand
 7bc:	e0 90 46 02 	lds	r14, 0x0246
 7c0:	f0 90 47 02 	lds	r15, 0x0247

  /*
     Autoencode-Betrieb vom ADC-Wandler unterbinden.
  */
  autoencode = FALSE;
 7c4:	10 92 47 02 	sts	0x0247, r1
 7c8:	10 92 46 02 	sts	0x0246, r1
  /*
     Vorbereitung zum lesen der Odometrie-Sensoren.
  */
  DDRC &= ~((1 << PC0) | (1 << PC1));   // Port auf Input=>Back-LEDs gehen aus
 7cc:	84 b3       	in	r24, 0x14	; 20
 7ce:	8c 7f       	andi	r24, 0xFC	; 252
 7d0:	84 bb       	out	0x14, r24	; 20
  ODOMETRIE_LED_ON;                     // Odometrie-LED's einschalten
 7d2:	97 9a       	sbi	0x12, 7	; 18

  /*
     Linken Odometrie-Sensor lesen
  */
  data[LEFT] = ReadADC(WHEEL_LEFT, 0);
 7d4:	60 e0       	ldi	r22, 0x00	; 0
 7d6:	70 e0       	ldi	r23, 0x00	; 0
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	50 d0       	rcall	.+160    	; 0x87e <ReadADC>
 7de:	f8 01       	movw	r30, r16
 7e0:	91 83       	std	Z+1, r25	; 0x01
 7e2:	80 83       	st	Z, r24
  /*
     Rechten Odometrie-Sensor lesen
  */
  data[RIGHT] = ReadADC(WHEEL_RIGHT, 0);
 7e4:	60 e0       	ldi	r22, 0x00	; 0
 7e6:	70 e0       	ldi	r23, 0x00	; 0
 7e8:	80 e0       	ldi	r24, 0x00	; 0
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	48 d0       	rcall	.+144    	; 0x87e <ReadADC>
 7ee:	f8 01       	movw	r30, r16
 7f0:	93 83       	std	Z+3, r25	; 0x03
 7f2:	82 83       	std	Z+2, r24	; 0x02

  /*
     Autoencode-Betrieb vom ADC-Wandler wiederherstellen.
  */
  autoencode = ec_bak;
 7f4:	f0 92 47 02 	sts	0x0247, r15
 7f8:	e0 92 46 02 	sts	0x0246, r14
}
 7fc:	1f 91       	pop	r17
 7fe:	0f 91       	pop	r16
 800:	ff 90       	pop	r15
 802:	ef 90       	pop	r14
 804:	08 95       	ret

00000806 <LineData>:
    tu_das ();                // rechter Sensor < 50
  \endcode
*****************************************************************************/
void  LineData (
  unsigned int  *data)
{
 806:	ef 92       	push	r14
 808:	ff 92       	push	r15
 80a:	0f 93       	push	r16
 80c:	1f 93       	push	r17
 80e:	8c 01       	movw	r16, r24
  int   ec_bak = autoencode;            // Sichert aktuellen Zustand
 810:	e0 90 46 02 	lds	r14, 0x0246
 814:	f0 90 47 02 	lds	r15, 0x0247

  /*
     Autoencode-Betrieb vom ADC-Wandler unterbinden.
  */
  autoencode = FALSE;
 818:	10 92 47 02 	sts	0x0247, r1
 81c:	10 92 46 02 	sts	0x0246, r1

  /*
     Linken Linien-Sensor lesen
  */
  data[LEFT] = ReadADC(IR_LEFT, 0);
 820:	60 e0       	ldi	r22, 0x00	; 0
 822:	70 e0       	ldi	r23, 0x00	; 0
 824:	83 e0       	ldi	r24, 0x03	; 3
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	2a d0       	rcall	.+84     	; 0x87e <ReadADC>
 82a:	f8 01       	movw	r30, r16
 82c:	91 83       	std	Z+1, r25	; 0x01
 82e:	80 83       	st	Z, r24
  /*
     Rechten Linien-Sensor lesen
  */
  data[RIGHT] = ReadADC(IR_RIGHT, 0);
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	70 e0       	ldi	r23, 0x00	; 0
 834:	82 e0       	ldi	r24, 0x02	; 2
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	22 d0       	rcall	.+68     	; 0x87e <ReadADC>
 83a:	f8 01       	movw	r30, r16
 83c:	93 83       	std	Z+3, r25	; 0x03
 83e:	82 83       	std	Z+2, r24	; 0x02
  /*
     Autoencode-Betrieb vom ADC-Wandler wiederherstellen.
  */
  autoencode = ec_bak;
 840:	f0 92 47 02 	sts	0x0247, r15
 844:	e0 92 46 02 	sts	0x0246, r14
}
 848:	1f 91       	pop	r17
 84a:	0f 91       	pop	r16
 84c:	ff 90       	pop	r15
 84e:	ef 90       	pop	r14
 850:	08 95       	ret

00000852 <Battery>:
    alles_stop ();            // Spannung zu klein, Akkus schonen
  \endcode
*****************************************************************************/
int   Battery (
  void)
{
 852:	0f 93       	push	r16
 854:	1f 93       	push	r17
  int   ec_bak = autoencode;            // Sichert aktuellen Zustand
 856:	00 91 46 02 	lds	r16, 0x0246
 85a:	10 91 47 02 	lds	r17, 0x0247
  int   data;

  /*
     Autoencode-Betrieb vom ADC-Wandler unterbinden.
  */
  autoencode = FALSE;
 85e:	10 92 47 02 	sts	0x0247, r1
 862:	10 92 46 02 	sts	0x0246, r1

  data = ReadADC(BATTERIE, 10);
 866:	6a e0       	ldi	r22, 0x0A	; 10
 868:	70 e0       	ldi	r23, 0x00	; 0
 86a:	85 e0       	ldi	r24, 0x05	; 5
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	07 d0       	rcall	.+14     	; 0x87e <ReadADC>
  /*
     Autoencode-Betrieb vom ADC-Wandler wiederherstellen.
  */
  autoencode = ec_bak;
 870:	10 93 47 02 	sts	0x0247, r17
 874:	00 93 46 02 	sts	0x0246, r16
  return data;
}
 878:	1f 91       	pop	r17
 87a:	0f 91       	pop	r16
 87c:	08 95       	ret

0000087e <ReadADC>:
  \return
  10 Bit A/D Wert (Bereich 0..1023)
*****************************************************************************/

unsigned int ReadADC(unsigned int mux, unsigned int sleep)
{  
 87e:	85 30       	cpi	r24, 0x05	; 5
 880:	91 05       	cpc	r25, r1
 882:	11 f4       	brne	.+4      	; 0x888 <ReadADC+0xa>
  if ((mux) == (BATTERIE))
    ADMUX = (1 << REFS0) | (1 << REFS1) | (mux); // interne 2.56V Referenz
 884:	85 ec       	ldi	r24, 0xC5	; 197
 886:	01 c0       	rjmp	.+2      	; 0x88a <ReadADC+0xc>
  else
    ADMUX = (1 << REFS0) | (mux);           // Referenz mit externer Kapazitaet
 888:	80 64       	ori	r24, 0x40	; 64
 88a:	87 b9       	out	0x07, r24	; 7
  if (sleep)
 88c:	61 15       	cp	r22, r1
 88e:	71 05       	cpc	r23, r1
 890:	11 f0       	breq	.+4      	; 0x896 <ReadADC+0x18>
    Sleep(sleep);
 892:	86 2f       	mov	r24, r22
 894:	1a d1       	rcall	.+564    	; 0xaca <Sleep>

  ADCSRA |= (1 << ADSC);                // Starte AD-Wandlung
 896:	36 9a       	sbi	0x06, 6	; 6
  while (!(ADCSRA & (1 << ADIF)))       // Ende der AD-Wandlung abwarten
 898:	34 9b       	sbis	0x06, 4	; 6
 89a:	fe cf       	rjmp	.-4      	; 0x898 <ReadADC+0x1a>
    ;
  ADCSRA |= (1 << ADIF);                // AD-Interupt-Flag zuruecksetzen
 89c:	34 9a       	sbi	0x06, 4	; 6
  return ADC;                           // Ergebnis als 16-Bit-Wert
 89e:	24 b1       	in	r18, 0x04	; 4
 8a0:	35 b1       	in	r19, 0x05	; 5
}
 8a2:	c9 01       	movw	r24, r18
 8a4:	08 95       	ret

000008a6 <StatusLED>:
  }
  \endcode
*****************************************************************************/
inline void StatusLED (
  unsigned char color)
{
 8a6:	88 23       	and	r24, r24
 8a8:	11 f4       	brne	.+4      	; 0x8ae <StatusLED+0x8>
  if (color == OFF)
  {
    GREEN_LED_OFF;
 8aa:	c0 98       	cbi	0x18, 0	; 24
 8ac:	03 c0       	rjmp	.+6      	; 0x8b4 <StatusLED+0xe>
    RED_LED_OFF;
  }
  if (color == GREEN)
 8ae:	81 30       	cpi	r24, 0x01	; 1
 8b0:	19 f4       	brne	.+6      	; 0x8b8 <StatusLED+0x12>
  {
    GREEN_LED_ON;
 8b2:	c0 9a       	sbi	0x18, 0	; 24
    RED_LED_OFF;
 8b4:	92 98       	cbi	0x12, 2	; 18
 8b6:	08 95       	ret
  }
  if (color == YELLOW)
 8b8:	83 30       	cpi	r24, 0x03	; 3
 8ba:	19 f4       	brne	.+6      	; 0x8c2 <StatusLED+0x1c>
  {
    GREEN_LED_ON;
 8bc:	c0 9a       	sbi	0x18, 0	; 24
    RED_LED_ON;
 8be:	92 9a       	sbi	0x12, 2	; 18
 8c0:	08 95       	ret
  }
  if (color == RED)
 8c2:	82 30       	cpi	r24, 0x02	; 2
 8c4:	11 f4       	brne	.+4      	; 0x8ca <StatusLED+0x24>
  {
    GREEN_LED_OFF;
 8c6:	c0 98       	cbi	0x18, 0	; 24
    RED_LED_ON;
 8c8:	92 9a       	sbi	0x12, 2	; 18
 8ca:	08 95       	ret

000008cc <FrontLED>:
  FrontLED (ON);
  \endcode
*****************************************************************************/
inline void FrontLED (
  unsigned char status)
{
 8cc:	92 b3       	in	r25, 0x12	; 18
 8ce:	82 95       	swap	r24
 8d0:	88 0f       	add	r24, r24
 8d2:	88 0f       	add	r24, r24
 8d4:	80 7c       	andi	r24, 0xC0	; 192
 8d6:	9f 7b       	andi	r25, 0xBF	; 191
 8d8:	98 2b       	or	r25, r24
 8da:	92 bb       	out	0x12, r25	; 18
  PORTD = (PORTD &~(1 << PD6)) | (status << PD6);
}
 8dc:	08 95       	ret

000008de <BackLED>:
  \endcode
*****************************************************************************/
void BackLED (
  unsigned char left,
  unsigned char right)
{
 8de:	98 2f       	mov	r25, r24
  if (left || right)
 8e0:	88 23       	and	r24, r24
 8e2:	11 f4       	brne	.+4      	; 0x8e8 <BackLED+0xa>
 8e4:	66 23       	and	r22, r22
 8e6:	49 f0       	breq	.+18     	; 0x8fa <BackLED+0x1c>
  {
    PORTD &= ~(1 << PD7);               // Rad-LED's OFF
 8e8:	97 98       	cbi	0x12, 7	; 18
    DDRC |= (1 << PC0) | (1 << PC1);    // Port als Output => KEINE Odometrie
 8ea:	84 b3       	in	r24, 0x14	; 20
 8ec:	83 60       	ori	r24, 0x03	; 3
 8ee:	84 bb       	out	0x14, r24	; 20
    PORTC |= (1 << PC0) | (1 << PC1);
 8f0:	85 b3       	in	r24, 0x15	; 21
 8f2:	83 60       	ori	r24, 0x03	; 3
 8f4:	85 bb       	out	0x15, r24	; 21
  }
  if (!left)
 8f6:	99 23       	and	r25, r25
 8f8:	09 f4       	brne	.+2      	; 0x8fc <BackLED+0x1e>
    PORTC &= ~(1 << PC1);
 8fa:	a9 98       	cbi	0x15, 1	; 21
  if (!right)
 8fc:	66 23       	and	r22, r22
 8fe:	09 f4       	brne	.+2      	; 0x902 <BackLED+0x24>
    PORTC &= ~(1 << PC0);
 900:	a8 98       	cbi	0x15, 0	; 21
 902:	08 95       	ret

00000904 <MotorSpeed>:
  \endcode
*****************************************************************************/
inline void MotorSpeed (
  unsigned char left_speed,
  unsigned char right_speed)
{
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	9b bd       	out	0x2b, r25	; 43
 908:	8a bd       	out	0x2a, r24	; 42
  OCR1A = left_speed;
  OCR1B = right_speed;
 90a:	70 e0       	ldi	r23, 0x00	; 0
 90c:	79 bd       	out	0x29, r23	; 41
 90e:	68 bd       	out	0x28, r22	; 40
}
 910:	08 95       	ret

00000912 <MotorDir>:
  \endcode
*****************************************************************************/
inline void MotorDir (
  unsigned char left_dir,
  unsigned char right_dir)
{
 912:	92 b3       	in	r25, 0x12	; 18
 914:	9f 7c       	andi	r25, 0xCF	; 207
 916:	98 2b       	or	r25, r24
 918:	92 bb       	out	0x12, r25	; 18
  PORTD = (PORTD &~ ((1 << PD4) | (1 << PD5))) | left_dir;
  PORTB = (PORTB &~ ((1 << PB4) | (1 << PB5))) | right_dir;
 91a:	88 b3       	in	r24, 0x18	; 24
 91c:	8f 7c       	andi	r24, 0xCF	; 207
 91e:	86 2b       	or	r24, r22
 920:	88 bb       	out	0x18, r24	; 24
}
 922:	08 95       	ret

00000924 <UartPutc>:
  UartPutc ('o');
  \endcode
*****************************************************************************/
void UartPutc (
  unsigned char zeichen)
{
 924:	98 2f       	mov	r25, r24
  UCSRB  = 0x08;                        // enable transmitter
 926:	88 e0       	ldi	r24, 0x08	; 8
 928:	8a b9       	out	0x0a, r24	; 10
  UCSRA |= 0x40;                        // clear transmitter flag
 92a:	5e 9a       	sbi	0x0b, 6	; 11
  while (!(UCSRA & 0x20))               // wait for empty transmit buffer
 92c:	5d 9b       	sbis	0x0b, 5	; 11
 92e:	fe cf       	rjmp	.-4      	; 0x92c <UartPutc+0x8>
    ;
  UDR = zeichen;
 930:	9c b9       	out	0x0c, r25	; 12
  while (!(UCSRA & 0x40))               // Wait for transmit complete flag (TXC)
 932:	5e 9b       	sbis	0x0b, 6	; 11
 934:	fe cf       	rjmp	.-4      	; 0x932 <UartPutc+0xe>
    ;
  UCSRB  = 0x00;                        // disable transmitter / powersave
 936:	1a b8       	out	0x0a, r1	; 10
}
 938:	08 95       	ret

0000093a <SerPrint>:
  SerPrint ("Hallo ASURO!\r\n");
  \endcode
*****************************************************************************/
void SerPrint (
  char *data)
{
 93a:	20 e0       	ldi	r18, 0x00	; 0
  \endcode
*****************************************************************************/
void UartPutc (
  unsigned char zeichen)
{
  UCSRB  = 0x08;                        // enable transmitter
 93c:	38 e0       	ldi	r19, 0x08	; 8
 93e:	09 c0       	rjmp	.+18     	; 0x952 <SerPrint+0x18>
 940:	3a b9       	out	0x0a, r19	; 10
  UCSRA |= 0x40;                        // clear transmitter flag
 942:	5e 9a       	sbi	0x0b, 6	; 11
  while (!(UCSRA & 0x20))               // wait for empty transmit buffer
 944:	5d 9b       	sbis	0x0b, 5	; 11
 946:	fe cf       	rjmp	.-4      	; 0x944 <SerPrint+0xa>
    ;
  UDR = zeichen;
 948:	ec b9       	out	0x0c, r30	; 12
  while (!(UCSRA & 0x40))               // Wait for transmit complete flag (TXC)
 94a:	5e 9b       	sbis	0x0b, 6	; 11
 94c:	fe cf       	rjmp	.-4      	; 0x94a <SerPrint+0x10>
  char *data)
{
  unsigned char i = 0;

  while (data [i] != 0x00)
    UartPutc (data [i++]);
 94e:	2f 5f       	subi	r18, 0xFF	; 255
  while (!(UCSRA & 0x20))               // wait for empty transmit buffer
    ;
  UDR = zeichen;
  while (!(UCSRA & 0x40))               // Wait for transmit complete flag (TXC)
    ;
  UCSRB  = 0x00;                        // disable transmitter / powersave
 950:	1a b8       	out	0x0a, r1	; 10
void SerPrint (
  char *data)
{
  unsigned char i = 0;

  while (data [i] != 0x00)
 952:	fc 01       	movw	r30, r24
 954:	e2 0f       	add	r30, r18
 956:	f1 1d       	adc	r31, r1
 958:	e0 81       	ld	r30, Z
 95a:	ee 23       	and	r30, r30
 95c:	89 f7       	brne	.-30     	; 0x940 <SerPrint+0x6>
    UartPutc (data [i++]);
}
 95e:	08 95       	ret

00000960 <SerPrint_p>:
  SerPrint_p (Text_im_FLASH);
  \endcode
*****************************************************************************/
void SerPrint_p (
  const char *data)
{
 960:	fc 01       	movw	r30, r24
  \endcode
*****************************************************************************/
void UartPutc (
  unsigned char zeichen)
{
  UCSRB  = 0x08;                        // enable transmitter
 962:	98 e0       	ldi	r25, 0x08	; 8
 964:	09 c0       	rjmp	.+18     	; 0x978 <SerPrint_p+0x18>
 966:	9a b9       	out	0x0a, r25	; 10
  UCSRA |= 0x40;                        // clear transmitter flag
 968:	5e 9a       	sbi	0x0b, 6	; 11
  while (!(UCSRA & 0x20))               // wait for empty transmit buffer
 96a:	5d 9b       	sbis	0x0b, 5	; 11
 96c:	fe cf       	rjmp	.-4      	; 0x96a <SerPrint_p+0xa>
    ;
  UDR = zeichen;
 96e:	8c b9       	out	0x0c, r24	; 12
  while (!(UCSRA & 0x40))               // Wait for transmit complete flag (TXC)
 970:	5e 9b       	sbis	0x0b, 6	; 11
 972:	fe cf       	rjmp	.-4      	; 0x970 <SerPrint_p+0x10>
    ;
  UCSRB  = 0x00;                        // disable transmitter / powersave
 974:	1a b8       	out	0x0a, r1	; 10
  char c;

  while ((c = pgm_read_byte(data)) != 0)
  {  
    UartPutc (c);
    data++;
 976:	31 96       	adiw	r30, 0x01	; 1
void SerPrint_p (
  const char *data)
{
  char c;

  while ((c = pgm_read_byte(data)) != 0)
 978:	84 91       	lpm	r24, Z+
 97a:	88 23       	and	r24, r24
 97c:	a1 f7       	brne	.-24     	; 0x966 <SerPrint_p+0x6>
  {  
    UartPutc (c);
    data++;
  }
}
 97e:	08 95       	ret

00000980 <PrintLong>:
  }
  \endcode
*****************************************************************************/
void PrintLong (
  long wert)
{
 980:	0f 93       	push	r16
 982:	1f 93       	push	r17
 984:	df 93       	push	r29
 986:	cf 93       	push	r28
 988:	cd b7       	in	r28, 0x3d	; 61
 98a:	de b7       	in	r29, 0x3e	; 62
 98c:	2c 97       	sbiw	r28, 0x0c	; 12
 98e:	0f b6       	in	r0, 0x3f	; 63
 990:	f8 94       	cli
 992:	de bf       	out	0x3e, r29	; 62
 994:	0f be       	out	0x3f, r0	; 63
 996:	cd bf       	out	0x3d, r28	; 61
  char text [12];                       // '-'1234567891'\0'

  ltoa (wert, text, 10);
 998:	2a e0       	ldi	r18, 0x0A	; 10
 99a:	30 e0       	ldi	r19, 0x00	; 0
 99c:	8e 01       	movw	r16, r28
 99e:	0f 5f       	subi	r16, 0xFF	; 255
 9a0:	1f 4f       	sbci	r17, 0xFF	; 255
 9a2:	a8 01       	movw	r20, r16
 9a4:	03 d1       	rcall	.+518    	; 0xbac <ltoa>
  SerPrint (text);
 9a6:	c8 01       	movw	r24, r16
 9a8:	c8 df       	rcall	.-112    	; 0x93a <SerPrint>
}
 9aa:	2c 96       	adiw	r28, 0x0c	; 12
 9ac:	0f b6       	in	r0, 0x3f	; 63
 9ae:	f8 94       	cli
 9b0:	de bf       	out	0x3e, r29	; 62
 9b2:	0f be       	out	0x3f, r0	; 63
 9b4:	cd bf       	out	0x3d, r28	; 61
 9b6:	cf 91       	pop	r28
 9b8:	df 91       	pop	r29
 9ba:	1f 91       	pop	r17
 9bc:	0f 91       	pop	r16
 9be:	08 95       	ret

000009c0 <PrintInt>:
  }
  \endcode
*****************************************************************************/
void PrintInt (
  int wert)
{
 9c0:	0f 93       	push	r16
 9c2:	1f 93       	push	r17
 9c4:	df 93       	push	r29
 9c6:	cf 93       	push	r28
 9c8:	cd b7       	in	r28, 0x3d	; 61
 9ca:	de b7       	in	r29, 0x3e	; 62
 9cc:	27 97       	sbiw	r28, 0x07	; 7
 9ce:	0f b6       	in	r0, 0x3f	; 63
 9d0:	f8 94       	cli
 9d2:	de bf       	out	0x3e, r29	; 62
 9d4:	0f be       	out	0x3f, r0	; 63
 9d6:	cd bf       	out	0x3d, r28	; 61
  char text [7];                        // "-12345"

  itoa (wert, text, 10);
 9d8:	4a e0       	ldi	r20, 0x0A	; 10
 9da:	50 e0       	ldi	r21, 0x00	; 0
 9dc:	8e 01       	movw	r16, r28
 9de:	0f 5f       	subi	r16, 0xFF	; 255
 9e0:	1f 4f       	sbci	r17, 0xFF	; 255
 9e2:	b8 01       	movw	r22, r16
 9e4:	c4 d0       	rcall	.+392    	; 0xb6e <itoa>
  SerPrint (text);
 9e6:	c8 01       	movw	r24, r16
 9e8:	a8 df       	rcall	.-176    	; 0x93a <SerPrint>
}
 9ea:	27 96       	adiw	r28, 0x07	; 7
 9ec:	0f b6       	in	r0, 0x3f	; 63
 9ee:	f8 94       	cli
 9f0:	de bf       	out	0x3e, r29	; 62
 9f2:	0f be       	out	0x3f, r0	; 63
 9f4:	cd bf       	out	0x3d, r28	; 61
 9f6:	cf 91       	pop	r28
 9f8:	df 91       	pop	r29
 9fa:	1f 91       	pop	r17
 9fc:	0f 91       	pop	r16
 9fe:	08 95       	ret

00000a00 <StartSwitch>:
  // welche Taste gedrückt wurde, wenn nötig.
  switched = FALSE;         // Vorbereitung für neuen Aufruf von StartSwitch()
  \endcode
*****************************************************************************/
void StartSwitch (void)
{
 a00:	93 98       	cbi	0x12, 3	; 18
  SWITCH_OFF;                           // Port-Bit auf LOW
  DDRD &= ~SWITCHES;                    // Port-Bit SWITCHES als INPUT
 a02:	8b 98       	cbi	0x11, 3	; 17
#if defined(__AVR_ATmega168__)
  EICRA &= ~(_BV(ISC11) | _BV(ISC10));  // Low level erzeugt Interrupt
  EIMSK |= _BV(INT1);                  // Externen Interrupt 1 zulassen
#else
  MCUCR &= ~(_BV(ISC11) | _BV(ISC10));  // Low level erzeugt Interrupt
 a04:	85 b7       	in	r24, 0x35	; 53
 a06:	83 7f       	andi	r24, 0xF3	; 243
 a08:	85 bf       	out	0x35, r24	; 53
  GICR |= _BV(INT1);                  // Externen Interrupt 1 zulassen
 a0a:	8b b7       	in	r24, 0x3b	; 59
 a0c:	80 68       	ori	r24, 0x80	; 128
 a0e:	8b bf       	out	0x3b, r24	; 59
#endif  
}
 a10:	08 95       	ret

00000a12 <StopSwitch>:

  \par  Beispiel:
  (Nicht vorhanden)
*****************************************************************************/
void StopSwitch (void)
{
 a12:	8b b7       	in	r24, 0x3b	; 59
 a14:	8f 77       	andi	r24, 0x7F	; 127
 a16:	8b bf       	out	0x3b, r24	; 59
#if defined(__AVR_ATmega168__)
  EIMSK &= ~_BV(INT1);                 // Externen Interrupt 1 sperren
#else
  GICR &= ~_BV(INT1);                 // Externen Interrupt 1 sperren
#endif
}
 a18:	08 95       	ret

00000a1a <PollSwitch>:
    Msleep (500);                       // 0,5 sek warten
  }
  \endcode
*****************************************************************************/
unsigned char PollSwitch (void)
{
 a1a:	cf 92       	push	r12
 a1c:	df 92       	push	r13
 a1e:	ef 92       	push	r14
 a20:	ff 92       	push	r15
 a22:	0f 93       	push	r16
 a24:	1f 93       	push	r17
  unsigned int i;
  int ec_bak = autoencode;              // Sichert aktuellen Zustand
 a26:	c0 90 46 02 	lds	r12, 0x0246
 a2a:	d0 90 47 02 	lds	r13, 0x0247

  /*
     Autoencode-Betrieb vom ADC-Wandler unterbinden.
  */
  autoencode = FALSE;
 a2e:	10 92 47 02 	sts	0x0247, r1
 a32:	10 92 46 02 	sts	0x0246, r1

  DDRD |= SWITCHES;                     // Port-Bit SWITCHES als Output
 a36:	8b 9a       	sbi	0x11, 3	; 17
  SWITCH_ON;                            // Port-Bit auf HIGH zur Messung
 a38:	93 9a       	sbi	0x12, 3	; 18
  i = ReadADC(SWITCH, 10);
 a3a:	6a e0       	ldi	r22, 0x0A	; 10
 a3c:	70 e0       	ldi	r23, 0x00	; 0
 a3e:	84 e0       	ldi	r24, 0x04	; 4
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	1d df       	rcall	.-454    	; 0x87e <ReadADC>
 a44:	7c 01       	movw	r14, r24

  SWITCH_OFF;                           // Port-Bit auf LOW
 a46:	93 98       	cbi	0x12, 3	; 18
  Sleep (5);
 a48:	85 e0       	ldi	r24, 0x05	; 5
 a4a:	3f d0       	rcall	.+126    	; 0xaca <Sleep>

  /*
     Autoencode-Betrieb vom ADC-Wandler wiederherstellen.
  */
  autoencode = ec_bak;
 a4c:	d0 92 47 02 	sts	0x0247, r13
 a50:	c0 92 46 02 	sts	0x0246, r12
 a54:	00 e0       	ldi	r16, 0x00	; 0
 a56:	10 e0       	ldi	r17, 0x00	; 0
 a58:	60 e0       	ldi	r22, 0x00	; 0
 a5a:	70 e4       	ldi	r23, 0x40	; 64
 a5c:	8c e9       	ldi	r24, 0x9C	; 156
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	a8 01       	movw	r20, r16
 a62:	97 01       	movw	r18, r14
 a64:	26 d1       	rcall	.+588    	; 0xcb2 <__divmodsi4>
 a66:	ca 01       	movw	r24, r20
 a68:	b9 01       	movw	r22, r18
 a6a:	2e e3       	ldi	r18, 0x3E	; 62
 a6c:	30 e0       	ldi	r19, 0x00	; 0
 a6e:	40 e0       	ldi	r20, 0x00	; 0
 a70:	50 e0       	ldi	r21, 0x00	; 0
 a72:	de d0       	rcall	.+444    	; 0xc30 <__mulsi3>
 a74:	68 55       	subi	r22, 0x58	; 88
 a76:	72 46       	sbci	r23, 0x62	; 98
 a78:	89 40       	sbci	r24, 0x09	; 9
 a7a:	90 40       	sbci	r25, 0x00	; 0
 a7c:	20 e1       	ldi	r18, 0x10	; 16
 a7e:	37 e2       	ldi	r19, 0x27	; 39
 a80:	40 e0       	ldi	r20, 0x00	; 0
 a82:	50 e0       	ldi	r21, 0x00	; 0
 a84:	16 d1       	rcall	.+556    	; 0xcb2 <__divmodsi4>
 a86:	82 2f       	mov	r24, r18
  return  ((unsigned char) ((( 1024.0/(float)i - 1.0)) * 61.0 + 0.5));

    Wert 61L evtl. anpasssen, falls fuer K1 falsche Werte zurueckgegebn werden.
  */
  return ((10240000L / (long)i - 10000L) * MY_SWITCH_VALUE + 5000L) / 10000;
}
 a88:	1f 91       	pop	r17
 a8a:	0f 91       	pop	r16
 a8c:	ff 90       	pop	r15
 a8e:	ef 90       	pop	r14
 a90:	df 90       	pop	r13
 a92:	cf 90       	pop	r12
 a94:	08 95       	ret

00000a96 <Gettime>:
    }
  }
  \endcode
*****************************************************************************/
unsigned long Gettime (void)
{
 a96:	60 91 4f 02 	lds	r22, 0x024F
 a9a:	70 91 50 02 	lds	r23, 0x0250
 a9e:	80 91 51 02 	lds	r24, 0x0251
 aa2:	90 91 52 02 	lds	r25, 0x0252
 aa6:	20 91 4c 02 	lds	r18, 0x024C
 aaa:	98 2f       	mov	r25, r24
 aac:	87 2f       	mov	r24, r23
 aae:	76 2f       	mov	r23, r22
 ab0:	66 27       	eor	r22, r22
 ab2:	62 0f       	add	r22, r18
 ab4:	71 1d       	adc	r23, r1
 ab6:	81 1d       	adc	r24, r1
 ab8:	91 1d       	adc	r25, r1
 aba:	24 e2       	ldi	r18, 0x24	; 36
 abc:	30 e0       	ldi	r19, 0x00	; 0
 abe:	40 e0       	ldi	r20, 0x00	; 0
 ac0:	50 e0       	ldi	r21, 0x00	; 0
 ac2:	d5 d0       	rcall	.+426    	; 0xc6e <__udivmodsi4>
 ac4:	ca 01       	movw	r24, r20
  return ((timebase * 256) + count36kHz) / 36;
}
 ac6:	b9 01       	movw	r22, r18
 ac8:	08 95       	ret

00000aca <Sleep>:
  Sleep (36);
  \endcode
*****************************************************************************/
void Sleep (
  unsigned char time36kHz)
{
 aca:	90 91 4c 02 	lds	r25, 0x024C
 ace:	98 0f       	add	r25, r24
  unsigned char ziel = (time36kHz + count36kHz) & 0x00FF;

  while (count36kHz != ziel)
 ad0:	80 91 4c 02 	lds	r24, 0x024C
 ad4:	89 17       	cp	r24, r25
 ad6:	e1 f7       	brne	.-8      	; 0xad0 <Sleep+0x6>
    ;
}
 ad8:	08 95       	ret

00000ada <Msleep>:
  Msleep (1500);
  \endcode
*****************************************************************************/
void Msleep (
  int dauer)
{
 ada:	bc 01       	movw	r22, r24
 adc:	20 e0       	ldi	r18, 0x00	; 0
 ade:	30 e0       	ldi	r19, 0x00	; 0
 ae0:	09 c0       	rjmp	.+18     	; 0xaf4 <Msleep+0x1a>
  \endcode
*****************************************************************************/
void Sleep (
  unsigned char time36kHz)
{
  unsigned char ziel = (time36kHz + count36kHz) & 0x00FF;
 ae2:	40 91 4c 02 	lds	r20, 0x024C
 ae6:	4c 5d       	subi	r20, 0xDC	; 220

  while (count36kHz != ziel)
 ae8:	80 91 4c 02 	lds	r24, 0x024C
 aec:	84 17       	cp	r24, r20
 aee:	e1 f7       	brne	.-8      	; 0xae8 <Msleep+0xe>
*****************************************************************************/
void Msleep (
  int dauer)
{
  int z;
  for (z = 0; z < dauer; z++)
 af0:	2f 5f       	subi	r18, 0xFF	; 255
 af2:	3f 4f       	sbci	r19, 0xFF	; 255
 af4:	26 17       	cp	r18, r22
 af6:	37 07       	cpc	r19, r23
 af8:	a4 f3       	brlt	.-24     	; 0xae2 <Msleep+0x8>
    Sleep (36);
}
 afa:	08 95       	ret

00000afc <SerWrite>:
  \endcode
*****************************************************************************/
void SerWrite (
  unsigned char *data,
  unsigned char length)
{
 afc:	28 e0       	ldi	r18, 0x08	; 8
 afe:	2a b9       	out	0x0a, r18	; 10
 b00:	fc 01       	movw	r30, r24
 b02:	05 c0       	rjmp	.+10     	; 0xb0e <SerWrite+0x12>
  unsigned char i = 0;

  UCSRB = (1<<TXEN);                    // Sender einschalten
  while (length > 0)                    // so lange noch Daten da sind
  {
    if (UCSRA & (1<<UDRE))
 b04:	5d 9b       	sbis	0x0b, 5	; 11
 b06:	fe cf       	rjmp	.-4      	; 0xb04 <SerWrite+0x8>
    {                                   // warten, bis der Sendebuffer leer ist
      UDR = data[i++];
 b08:	81 91       	ld	r24, Z+
 b0a:	8c b9       	out	0x0c, r24	; 12
      length --;
 b0c:	61 50       	subi	r22, 0x01	; 1
  unsigned char length)
{
  unsigned char i = 0;

  UCSRB = (1<<TXEN);                    // Sender einschalten
  while (length > 0)                    // so lange noch Daten da sind
 b0e:	66 23       	and	r22, r22
 b10:	c9 f7       	brne	.-14     	; 0xb04 <SerWrite+0x8>
    {                                   // warten, bis der Sendebuffer leer ist
      UDR = data[i++];
      length --;
    }
  }
  while (!(UCSRA & (1<<TXC)))           // abwarten, bis das letzte Zeichen 
 b12:	5e 9b       	sbis	0x0b, 6	; 11
 b14:	fe cf       	rjmp	.-4      	; 0xb12 <SerWrite+0x16>
    ;                                   // uebertragen wurde.        

  UCSRA |= (1<<TXC);                    // transmission completed Flag setzen
 b16:	5e 9a       	sbi	0x0b, 6	; 11

  UCSRB &= ~(1<<TXEN);                  // Sender ausschalten / Powersave
 b18:	53 98       	cbi	0x0a, 3	; 10
}
 b1a:	08 95       	ret

00000b1c <SerRead>:
*****************************************************************************/
void SerRead (
  unsigned char *data,
  unsigned char length,
  unsigned int timeout)
{
 b1c:	fc 01       	movw	r30, r24
  unsigned char i = 0;
  unsigned int  time = 0;

  UCSRB = (1<<RXEN);                         // Empfaenger einschalten
 b1e:	80 e1       	ldi	r24, 0x10	; 16
 b20:	8a b9       	out	0x0a, r24	; 10

  if (timeout != 0)
 b22:	41 15       	cp	r20, r1
 b24:	51 05       	cpc	r21, r1
 b26:	11 f4       	brne	.+4      	; 0xb2c <SerRead+0x10>
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	1e c0       	rjmp	.+60     	; 0xb68 <SerRead+0x4c>
 b2c:	df 01       	movw	r26, r30
 b2e:	70 e0       	ldi	r23, 0x00	; 0
 b30:	05 c0       	rjmp	.+10     	; 0xb3c <SerRead+0x20>
      Die Funktion wird auf alle Faelle, auch ohne empfangene Daten, wieder
      verlassen. --> nonblocking mode
    */
    while (i < length && time++ < timeout)
    {
      if (UCSRA & (1<<RXC))
 b32:	5f 9b       	sbis	0x0b, 7	; 11
 b34:	07 c0       	rjmp	.+14     	; 0xb44 <SerRead+0x28>
      {
        data [i++] = UDR;
 b36:	8c b1       	in	r24, 0x0c	; 12
 b38:	8d 93       	st	X+, r24
 b3a:	7f 5f       	subi	r23, 0xFF	; 255
  {
    /*
      Die Funktion wird auf alle Faelle, auch ohne empfangene Daten, wieder
      verlassen. --> nonblocking mode
    */
    while (i < length && time++ < timeout)
 b3c:	76 17       	cp	r23, r22
 b3e:	b0 f4       	brcc	.+44     	; 0xb6c <SerRead+0x50>
 b40:	20 e0       	ldi	r18, 0x00	; 0
 b42:	30 e0       	ldi	r19, 0x00	; 0
 b44:	2f 5f       	subi	r18, 0xFF	; 255
 b46:	3f 4f       	sbci	r19, 0xFF	; 255
 b48:	c9 01       	movw	r24, r18
 b4a:	01 97       	sbiw	r24, 0x01	; 1
 b4c:	84 17       	cp	r24, r20
 b4e:	95 07       	cpc	r25, r21
 b50:	80 f3       	brcs	.-32     	; 0xb32 <SerRead+0x16>
      {
        data [i++] = UDR;
        time = 0;
      }
    }
    if (time > timeout)
 b52:	42 17       	cp	r20, r18
 b54:	53 07       	cpc	r21, r19
 b56:	50 f4       	brcc	.+20     	; 0xb6c <SerRead+0x50>
      data [0] = 'T';
 b58:	84 e5       	ldi	r24, 0x54	; 84
 b5a:	80 83       	st	Z, r24
 b5c:	08 95       	ret
      Die Funktion wird auf alle Faelle erst nach dem Empfang von der
      vorgegebenen Anzahl Zeichen verlassen. blocking mode
    */
    while (i < length)
    {
      if (UCSRA & (1<<RXC))
 b5e:	5f 9b       	sbis	0x0b, 7	; 11
 b60:	fe cf       	rjmp	.-4      	; 0xb5e <SerRead+0x42>
        data [i++] = UDR;
 b62:	8c b1       	in	r24, 0x0c	; 12
 b64:	81 93       	st	Z+, r24
 b66:	9f 5f       	subi	r25, 0xFF	; 255
  {
    /*
      Die Funktion wird auf alle Faelle erst nach dem Empfang von der
      vorgegebenen Anzahl Zeichen verlassen. blocking mode
    */
    while (i < length)
 b68:	96 17       	cp	r25, r22
 b6a:	c8 f3       	brcs	.-14     	; 0xb5e <SerRead+0x42>
 b6c:	08 95       	ret

00000b6e <itoa>:
 b6e:	fb 01       	movw	r30, r22
 b70:	9f 01       	movw	r18, r30
 b72:	e8 94       	clt
 b74:	42 30       	cpi	r20, 0x02	; 2
 b76:	bc f0       	brlt	.+46     	; 0xba6 <itoa+0x38>
 b78:	45 32       	cpi	r20, 0x25	; 37
 b7a:	ac f4       	brge	.+42     	; 0xba6 <itoa+0x38>
 b7c:	4a 30       	cpi	r20, 0x0A	; 10
 b7e:	29 f4       	brne	.+10     	; 0xb8a <itoa+0x1c>
 b80:	97 fb       	bst	r25, 7
 b82:	1e f4       	brtc	.+6      	; 0xb8a <itoa+0x1c>
 b84:	90 95       	com	r25
 b86:	81 95       	neg	r24
 b88:	9f 4f       	sbci	r25, 0xFF	; 255
 b8a:	64 2f       	mov	r22, r20
 b8c:	77 27       	eor	r23, r23
 b8e:	ac d0       	rcall	.+344    	; 0xce8 <__udivmodhi4>
 b90:	80 5d       	subi	r24, 0xD0	; 208
 b92:	8a 33       	cpi	r24, 0x3A	; 58
 b94:	0c f0       	brlt	.+2      	; 0xb98 <itoa+0x2a>
 b96:	89 5d       	subi	r24, 0xD9	; 217
 b98:	81 93       	st	Z+, r24
 b9a:	cb 01       	movw	r24, r22
 b9c:	00 97       	sbiw	r24, 0x00	; 0
 b9e:	a9 f7       	brne	.-22     	; 0xb8a <itoa+0x1c>
 ba0:	16 f4       	brtc	.+4      	; 0xba6 <itoa+0x38>
 ba2:	5d e2       	ldi	r21, 0x2D	; 45
 ba4:	51 93       	st	Z+, r21
 ba6:	10 82       	st	Z, r1
 ba8:	c9 01       	movw	r24, r18
 baa:	32 c0       	rjmp	.+100    	; 0xc10 <strrev>

00000bac <ltoa>:
 bac:	fa 01       	movw	r30, r20
 bae:	cf 93       	push	r28
 bb0:	ff 93       	push	r31
 bb2:	ef 93       	push	r30
 bb4:	22 30       	cpi	r18, 0x02	; 2
 bb6:	3c f1       	brlt	.+78     	; 0xc06 <ltoa+0x5a>
 bb8:	25 32       	cpi	r18, 0x25	; 37
 bba:	2c f5       	brge	.+74     	; 0xc06 <ltoa+0x5a>
 bbc:	c2 2f       	mov	r28, r18
 bbe:	e8 94       	clt
 bc0:	ca 30       	cpi	r28, 0x0A	; 10
 bc2:	49 f4       	brne	.+18     	; 0xbd6 <ltoa+0x2a>
 bc4:	97 fb       	bst	r25, 7
 bc6:	3e f4       	brtc	.+14     	; 0xbd6 <ltoa+0x2a>
 bc8:	90 95       	com	r25
 bca:	80 95       	com	r24
 bcc:	70 95       	com	r23
 bce:	61 95       	neg	r22
 bd0:	7f 4f       	sbci	r23, 0xFF	; 255
 bd2:	8f 4f       	sbci	r24, 0xFF	; 255
 bd4:	9f 4f       	sbci	r25, 0xFF	; 255
 bd6:	2c 2f       	mov	r18, r28
 bd8:	33 27       	eor	r19, r19
 bda:	44 27       	eor	r20, r20
 bdc:	55 27       	eor	r21, r21
 bde:	ff 93       	push	r31
 be0:	ef 93       	push	r30
 be2:	45 d0       	rcall	.+138    	; 0xc6e <__udivmodsi4>
 be4:	ef 91       	pop	r30
 be6:	ff 91       	pop	r31
 be8:	60 5d       	subi	r22, 0xD0	; 208
 bea:	6a 33       	cpi	r22, 0x3A	; 58
 bec:	0c f0       	brlt	.+2      	; 0xbf0 <ltoa+0x44>
 bee:	69 5d       	subi	r22, 0xD9	; 217
 bf0:	61 93       	st	Z+, r22
 bf2:	b9 01       	movw	r22, r18
 bf4:	ca 01       	movw	r24, r20
 bf6:	60 50       	subi	r22, 0x00	; 0
 bf8:	70 40       	sbci	r23, 0x00	; 0
 bfa:	80 40       	sbci	r24, 0x00	; 0
 bfc:	90 40       	sbci	r25, 0x00	; 0
 bfe:	59 f7       	brne	.-42     	; 0xbd6 <ltoa+0x2a>
 c00:	16 f4       	brtc	.+4      	; 0xc06 <ltoa+0x5a>
 c02:	cd e2       	ldi	r28, 0x2D	; 45
 c04:	c1 93       	st	Z+, r28
 c06:	10 82       	st	Z, r1
 c08:	8f 91       	pop	r24
 c0a:	9f 91       	pop	r25
 c0c:	cf 91       	pop	r28
 c0e:	00 c0       	rjmp	.+0      	; 0xc10 <strrev>

00000c10 <strrev>:
 c10:	dc 01       	movw	r26, r24
 c12:	fc 01       	movw	r30, r24
 c14:	67 2f       	mov	r22, r23
 c16:	71 91       	ld	r23, Z+
 c18:	77 23       	and	r23, r23
 c1a:	e1 f7       	brne	.-8      	; 0xc14 <strrev+0x4>
 c1c:	32 97       	sbiw	r30, 0x02	; 2
 c1e:	04 c0       	rjmp	.+8      	; 0xc28 <strrev+0x18>
 c20:	7c 91       	ld	r23, X
 c22:	6d 93       	st	X+, r22
 c24:	70 83       	st	Z, r23
 c26:	62 91       	ld	r22, -Z
 c28:	ae 17       	cp	r26, r30
 c2a:	bf 07       	cpc	r27, r31
 c2c:	c8 f3       	brcs	.-14     	; 0xc20 <strrev+0x10>
 c2e:	08 95       	ret

00000c30 <__mulsi3>:
 c30:	62 9f       	mul	r22, r18
 c32:	d0 01       	movw	r26, r0
 c34:	73 9f       	mul	r23, r19
 c36:	f0 01       	movw	r30, r0
 c38:	82 9f       	mul	r24, r18
 c3a:	e0 0d       	add	r30, r0
 c3c:	f1 1d       	adc	r31, r1
 c3e:	64 9f       	mul	r22, r20
 c40:	e0 0d       	add	r30, r0
 c42:	f1 1d       	adc	r31, r1
 c44:	92 9f       	mul	r25, r18
 c46:	f0 0d       	add	r31, r0
 c48:	83 9f       	mul	r24, r19
 c4a:	f0 0d       	add	r31, r0
 c4c:	74 9f       	mul	r23, r20
 c4e:	f0 0d       	add	r31, r0
 c50:	65 9f       	mul	r22, r21
 c52:	f0 0d       	add	r31, r0
 c54:	99 27       	eor	r25, r25
 c56:	72 9f       	mul	r23, r18
 c58:	b0 0d       	add	r27, r0
 c5a:	e1 1d       	adc	r30, r1
 c5c:	f9 1f       	adc	r31, r25
 c5e:	63 9f       	mul	r22, r19
 c60:	b0 0d       	add	r27, r0
 c62:	e1 1d       	adc	r30, r1
 c64:	f9 1f       	adc	r31, r25
 c66:	bd 01       	movw	r22, r26
 c68:	cf 01       	movw	r24, r30
 c6a:	11 24       	eor	r1, r1
 c6c:	08 95       	ret

00000c6e <__udivmodsi4>:
 c6e:	a1 e2       	ldi	r26, 0x21	; 33
 c70:	1a 2e       	mov	r1, r26
 c72:	aa 1b       	sub	r26, r26
 c74:	bb 1b       	sub	r27, r27
 c76:	fd 01       	movw	r30, r26
 c78:	0d c0       	rjmp	.+26     	; 0xc94 <__udivmodsi4_ep>

00000c7a <__udivmodsi4_loop>:
 c7a:	aa 1f       	adc	r26, r26
 c7c:	bb 1f       	adc	r27, r27
 c7e:	ee 1f       	adc	r30, r30
 c80:	ff 1f       	adc	r31, r31
 c82:	a2 17       	cp	r26, r18
 c84:	b3 07       	cpc	r27, r19
 c86:	e4 07       	cpc	r30, r20
 c88:	f5 07       	cpc	r31, r21
 c8a:	20 f0       	brcs	.+8      	; 0xc94 <__udivmodsi4_ep>
 c8c:	a2 1b       	sub	r26, r18
 c8e:	b3 0b       	sbc	r27, r19
 c90:	e4 0b       	sbc	r30, r20
 c92:	f5 0b       	sbc	r31, r21

00000c94 <__udivmodsi4_ep>:
 c94:	66 1f       	adc	r22, r22
 c96:	77 1f       	adc	r23, r23
 c98:	88 1f       	adc	r24, r24
 c9a:	99 1f       	adc	r25, r25
 c9c:	1a 94       	dec	r1
 c9e:	69 f7       	brne	.-38     	; 0xc7a <__udivmodsi4_loop>
 ca0:	60 95       	com	r22
 ca2:	70 95       	com	r23
 ca4:	80 95       	com	r24
 ca6:	90 95       	com	r25
 ca8:	9b 01       	movw	r18, r22
 caa:	ac 01       	movw	r20, r24
 cac:	bd 01       	movw	r22, r26
 cae:	cf 01       	movw	r24, r30
 cb0:	08 95       	ret

00000cb2 <__divmodsi4>:
 cb2:	97 fb       	bst	r25, 7
 cb4:	09 2e       	mov	r0, r25
 cb6:	05 26       	eor	r0, r21
 cb8:	0e d0       	rcall	.+28     	; 0xcd6 <__divmodsi4_neg1>
 cba:	57 fd       	sbrc	r21, 7
 cbc:	04 d0       	rcall	.+8      	; 0xcc6 <__divmodsi4_neg2>
 cbe:	d7 df       	rcall	.-82     	; 0xc6e <__udivmodsi4>
 cc0:	0a d0       	rcall	.+20     	; 0xcd6 <__divmodsi4_neg1>
 cc2:	00 1c       	adc	r0, r0
 cc4:	38 f4       	brcc	.+14     	; 0xcd4 <__divmodsi4_exit>

00000cc6 <__divmodsi4_neg2>:
 cc6:	50 95       	com	r21
 cc8:	40 95       	com	r20
 cca:	30 95       	com	r19
 ccc:	21 95       	neg	r18
 cce:	3f 4f       	sbci	r19, 0xFF	; 255
 cd0:	4f 4f       	sbci	r20, 0xFF	; 255
 cd2:	5f 4f       	sbci	r21, 0xFF	; 255

00000cd4 <__divmodsi4_exit>:
 cd4:	08 95       	ret

00000cd6 <__divmodsi4_neg1>:
 cd6:	f6 f7       	brtc	.-4      	; 0xcd4 <__divmodsi4_exit>
 cd8:	90 95       	com	r25
 cda:	80 95       	com	r24
 cdc:	70 95       	com	r23
 cde:	61 95       	neg	r22
 ce0:	7f 4f       	sbci	r23, 0xFF	; 255
 ce2:	8f 4f       	sbci	r24, 0xFF	; 255
 ce4:	9f 4f       	sbci	r25, 0xFF	; 255
 ce6:	08 95       	ret

00000ce8 <__udivmodhi4>:
 ce8:	aa 1b       	sub	r26, r26
 cea:	bb 1b       	sub	r27, r27
 cec:	51 e1       	ldi	r21, 0x11	; 17
 cee:	07 c0       	rjmp	.+14     	; 0xcfe <__udivmodhi4_ep>

00000cf0 <__udivmodhi4_loop>:
 cf0:	aa 1f       	adc	r26, r26
 cf2:	bb 1f       	adc	r27, r27
 cf4:	a6 17       	cp	r26, r22
 cf6:	b7 07       	cpc	r27, r23
 cf8:	10 f0       	brcs	.+4      	; 0xcfe <__udivmodhi4_ep>
 cfa:	a6 1b       	sub	r26, r22
 cfc:	b7 0b       	sbc	r27, r23

00000cfe <__udivmodhi4_ep>:
 cfe:	88 1f       	adc	r24, r24
 d00:	99 1f       	adc	r25, r25
 d02:	5a 95       	dec	r21
 d04:	a9 f7       	brne	.-22     	; 0xcf0 <__udivmodhi4_loop>
 d06:	80 95       	com	r24
 d08:	90 95       	com	r25
 d0a:	bc 01       	movw	r22, r24
 d0c:	cd 01       	movw	r24, r26
 d0e:	08 95       	ret

00000d10 <_exit>:
 d10:	f8 94       	cli

00000d12 <__stop_program>:
 d12:	ff cf       	rjmp	.-2      	; 0xd12 <__stop_program>
